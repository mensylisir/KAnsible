
[DEPRECATION WARNING]: The TRANSFORM_INVALID_GROUP_CHARS settings is set to 
allow bad characters in group names by default, this will change, but still be 
user configurable on deprecation. This feature will be removed in version 2.10.
 Deprecation warnings can be disabled by setting deprecation_warnings=False in 
ansible.cfg.
[WARNING]: Invalid characters were found in group names but not replaced, use
-vvvv to see details

PLAY [localhost] ***************************************************************

TASK [Check 2.9.0 <= Ansible version < 2.10.0] *********************************
ok: [localhost] => {
    "changed": false,
[WARNING]: Could not match supplied host pattern, ignoring: bastion
    "msg": "All assertions passed"
}

PLAY [bastion[0]] **************************************************************
skipping: no hosts matched

PLAY [k8s-cluster:etcd] ********************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1]

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [bootstrap-os : Fetch /etc/os-release] ************************************
ok: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/bootstrap-os/tasks/bootstrap-debian.yml for node1

TASK [bootstrap-os : Check if bootstrap is needed] *****************************
ok: [node1]

TASK [bootstrap-os : Check http::proxy in apt configuration files] *************
ok: [node1]

TASK [bootstrap-os : Add http_proxy to /etc/apt/apt.conf if http_proxy is defined] ***
skipping: [node1]

TASK [bootstrap-os : Check https::proxy in apt configuration files] ************
ok: [node1]

TASK [bootstrap-os : Add https_proxy to /etc/apt/apt.conf if https_proxy is defined] ***
skipping: [node1]

TASK [bootstrap-os : Check Network Name Resolution configuration] **************
skipping: [node1]

TASK [bootstrap-os : Change Network Name Resolution configuration] *************
skipping: [node1]

TASK [bootstrap-os : Restart systemd-resolved service] *************************
skipping: [node1]

TASK [bootstrap-os : Install python3] ******************************************
skipping: [node1]

TASK [bootstrap-os : Set the ansible_python_interpreter fact] ******************
ok: [node1]

TASK [bootstrap-os : Install dbus for the hostname module] *********************
ok: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : include_tasks] ********************************************
skipping: [node1]

TASK [bootstrap-os : Create remote_tmp for it is used by another module] *******
ok: [node1]

TASK [bootstrap-os : Gather host facts to get ansible_os_family] ***************
ok: [node1]

TASK [bootstrap-os : Assign inventory name to unconfigured hostnames (non-CoreOS, non-Flatcar, Suse and ClearLinux)] ***
ok: [node1]

TASK [bootstrap-os : Assign inventory name to unconfigured hostnames (CoreOS, Flatcar, Suse and ClearLinux only)] ***
skipping: [node1]

TASK [bootstrap-os : Update hostname fact (CoreOS, Flatcar, Suse and ClearLinux only)] ***
skipping: [node1]

TASK [bootstrap-os : Install ceph-commmon package] *****************************
skipping: [node1]

TASK [bootstrap-os : Ensure bash_completion.d folder exists] *******************
ok: [node1]

PLAY [Gather facts] ************************************************************

TASK [Gather minimal facts] ****************************************************
ok: [node1]

TASK [Gather necessary facts] **************************************************
ok: [node1] => (item=ansible_distribution_major_version)
ok: [node1] => (item=ansible_default_ipv4)
ok: [node1] => (item=ansible_all_ipv4_addresses)
ok: [node1] => (item=ansible_memtotal_mb)
ok: [node1] => (item=ansible_swaptotal_mb)

PLAY [k8s-cluster:etcd] ********************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
ok: [node1 -> localhost]

TASK [kubespray-defaults : set fallback_ips] ***********************************
ok: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [adduser : User | Create User Group] **************************************
ok: [node1]

TASK [adduser : User | Create User] ********************************************
ok: [node1]

TASK [kubernetes/preinstall : Remove swapfile from /etc/fstab] *****************
ok: [node1] => (item=swap)
ok: [node1] => (item=none)

TASK [kubernetes/preinstall : check swap] **************************************
ok: [node1]

TASK [kubernetes/preinstall : Disable swap] ************************************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if either kube-master or kube-node group is empty] ***
ok: [node1] => (item=kube-master) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube-master",
    "msg": "All assertions passed"
}
ok: [node1] => (item=kube-node) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": "kube-node",
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if etcd group is empty in external etcd mode] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if non systemd OS type] *********************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown OS] ******************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown network plugin] ******************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if incompatible network plugin and cloudprovider] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unsupported version of Kubernetes] *******
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if known booleans are set as strings (Use JSON format on CLI: -e "{'key': true }")] ***
ok: [node1] => (item={'name': 'download_run_once', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_run_once",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'deploy_netchecker', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "deploy_netchecker",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'download_always_pull', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "download_always_pull",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'helm_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "helm_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}
ok: [node1] => (item={'name': 'openstack_lbaas_enabled', 'value': False}) => {
    "ansible_loop_var": "item",
    "changed": false,
    "item": {
        "name": "openstack_lbaas_enabled",
        "value": false
    },
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if even number of etcd hosts] ***************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if memory is too small for masters] *********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if memory is too small for nodes] ***********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Guarantee that enough network address space is available for all pods] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if ip var does not match local ips] *********
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if access_ip is not pingable] ***************
changed: [node1]

TASK [kubernetes/preinstall : Stop if RBAC is not enabled when dashboard is enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if RBAC is not enabled when OCI cloud controller is enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if RBAC and anonymous-auth are not enabled when insecure port is disabled] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if kernel version is too low] ***************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if bad hostname] ****************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : check cloud_provider value] **********************
skipping: [node1]

TASK [kubernetes/preinstall : Ensure minimum calico version] *******************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Get current calico cluster version] **************
ok: [node1]

TASK [kubernetes/preinstall : Check that current calico version is enough for upgrade] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Check that cluster_id is set if calico_rr enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that calico_rr nodes are in k8s-cluster group] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that kube_service_addresses is a network range] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Check that kube_pods_subnet is a network range] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Check that kube_pods_subnet does not collide with kube_service_addresses] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown dns mode] ************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown kube proxy mode] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if vault is chose] **************************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown cert_management] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if unknown resolvconf_mode] *****************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host or docker] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host when container_manager != docker] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if download_localhost is enabled but download_run_once is not] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if kata_containers_enabled is enabled when container_manager is docker] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if download_localhost is enabled for Flatcar Container Linux] ***
skipping: [node1]

TASK [kubernetes/preinstall : Force binaries directory for Flatcar Container Linux by Kinvolk] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if booted with ostree] *********************
ok: [node1]

TASK [kubernetes/preinstall : set is_fedora_coreos] ****************************
ok: [node1]

TASK [kubernetes/preinstall : set is_fedora_coreos] ****************************
ok: [node1]

TASK [kubernetes/preinstall : check resolvconf] ********************************
ok: [node1]

TASK [kubernetes/preinstall : check systemd-resolved] **************************
ok: [node1]

TASK [kubernetes/preinstall : set dns facts] ***********************************
ok: [node1]

TASK [kubernetes/preinstall : check if kubelet is configured] ******************
ok: [node1]

TASK [kubernetes/preinstall : check if early DNS configuration stage] **********
ok: [node1]

TASK [kubernetes/preinstall : target resolv.conf files] ************************
ok: [node1]

TASK [kubernetes/preinstall : target temporary resolvconf cloud init file (Flatcar Container Linux by Kinvolk / Fedora CoreOS)] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if /etc/dhclient.conf exists] **************
ok: [node1]

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhclient.conf] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if /etc/dhcp/dhclient.conf exists] *********
ok: [node1]

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhcp/dhclient.conf] ***
ok: [node1]

TASK [kubernetes/preinstall : target dhclient hook file for Red Hat family] ****
skipping: [node1]

TASK [kubernetes/preinstall : target dhclient hook file for Debian family] *****
ok: [node1]

TASK [kubernetes/preinstall : generate search domains to resolvconf] ***********
ok: [node1]

TASK [kubernetes/preinstall : pick coredns cluster IP or default resolver] *****
ok: [node1]

TASK [kubernetes/preinstall : generate nameservers to resolvconf] **************
ok: [node1]

TASK [kubernetes/preinstall : gather os specific variables] ********************
ok: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/kubernetes/preinstall/vars/../vars/ubuntu.yml)

TASK [kubernetes/preinstall : set etcd vars if using kubeadm mode] *************
skipping: [node1]

TASK [kubernetes/preinstall : check /usr readonly] *****************************
ok: [node1]

TASK [kubernetes/preinstall : set alternate flexvolume path] *******************
skipping: [node1]

TASK [kubernetes/preinstall : Create kubernetes directories] *******************
ok: [node1] => (item=/etc/kubernetes)
ok: [node1] => (item=/etc/kubernetes/ssl)
ok: [node1] => (item=/etc/kubernetes/manifests)
ok: [node1] => (item=/usr/local/bin/kubernetes-scripts)
ok: [node1] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec)

TASK [kubernetes/preinstall : Create other directories] ************************
ok: [node1] => (item=/usr/local/bin)

TASK [kubernetes/preinstall : Check if kubernetes kubeadm compat cert dir exists] ***
ok: [node1]

TASK [kubernetes/preinstall : Create kubernetes kubeadm compat cert dir (kubernetes/kubeadm issue 1498)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Create cni directories] **************************
ok: [node1] => (item=/etc/cni/net.d)
ok: [node1] => (item=/opt/cni/bin)
ok: [node1] => (item=/var/lib/calico)

TASK [kubernetes/preinstall : Create local volume provisioner directories] *****
skipping: [node1] => (item=local-storage) 

TASK [kubernetes/preinstall : create temporary resolveconf cloud init file] ****
skipping: [node1]

TASK [kubernetes/preinstall : Add domain/search/nameservers/options to resolv.conf] ***
skipping: [node1]

TASK [kubernetes/preinstall : Remove search/domain/nameserver options before block] ***
skipping: [node1] => (item=['/etc/resolv.conf', 'search ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'nameserver ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'domain ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'options ']) 

TASK [kubernetes/preinstall : Remove search/domain/nameserver options after block] ***
skipping: [node1] => (item=['/etc/resolv.conf', 'search ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'nameserver ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'domain ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'options ']) 

TASK [kubernetes/preinstall : get temporary resolveconf cloud init file content] ***
skipping: [node1]

TASK [kubernetes/preinstall : persist resolvconf cloud init file] **************
skipping: [node1]

TASK [kubernetes/preinstall : Write resolved.conf] *****************************
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add nameservers to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add DNS search to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add DNS options to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : Update package management cache (zypper) - SUSE] ***
skipping: [node1]

TASK [kubernetes/preinstall : Update package management cache (APT)] ***********
ok: [node1]

TASK [kubernetes/preinstall : Remove legacy docker repo file] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Install python3-dnf for latest RedHat versions] ***
skipping: [node1]

TASK [kubernetes/preinstall : Install epel-release on RedHat/CentOS] ***********
skipping: [node1]

TASK [kubernetes/preinstall : Update common_required_pkgs with ipvsadm when kube_proxy_mode is ipvs] ***
ok: [node1]

TASK [kubernetes/preinstall : Install packages requirements] *******************
ok: [node1]

TASK [kubernetes/preinstall : Install ipvsadm for ClearLinux] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Confirm selinux deployed] ************************
skipping: [node1]

TASK [kubernetes/preinstall : Set selinux policy] ******************************
skipping: [node1]

TASK [kubernetes/preinstall : Disable IPv6 DNS lookup] *************************
skipping: [node1]

TASK [kubernetes/preinstall : Stat sysctl file configuration] ******************
ok: [node1]

TASK [kubernetes/preinstall : Change sysctl file path to link source if linked] ***
ok: [node1]

TASK [kubernetes/preinstall : Make sure sysctl file path folder exists] ********
ok: [node1]

TASK [kubernetes/preinstall : Enable ip forwarding] ****************************
ok: [node1]

TASK [kubernetes/preinstall : Ensure kube-bench parameters are set] ************
ok: [node1] => (item={'name': 'vm.overcommit_memory', 'value': 1})
ok: [node1] => (item={'name': 'kernel.panic', 'value': 10})
ok: [node1] => (item={'name': 'kernel.panic_on_oops', 'value': 1})

TASK [kubernetes/preinstall : Hosts | create list from inventory] **************
ok: [node1 -> localhost]

TASK [kubernetes/preinstall : Hosts | populate inventory into hosts file] ******
ok: [node1]

TASK [kubernetes/preinstall : Hosts | populate kubernetes loadbalancer address into hosts file] ***
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | Retrieve hosts file content] *************
ok: [node1]

TASK [kubernetes/preinstall : Hosts | Extract existing entries for localhost from hosts file] ***
ok: [node1] => (item=127.0.0.1 localhost localhost.localdomain)
skipping: [node1] => (item=127.0.1.1 master) 
skipping: [node1] => (item=) 
skipping: [node1] => (item=# The following lines are desirable for IPv6 capable hosts) 
ok: [node1] => (item=::1 ip6-localhost ip6-loopback localhost6 localhost6.localdomain)
skipping: [node1] => (item=fe00::0 ip6-localnet) 
skipping: [node1] => (item=ff00::0 ip6-mcastprefix) 
skipping: [node1] => (item=ff02::1 ip6-allnodes) 
skipping: [node1] => (item=ff02::2 ip6-allrouters) 
skipping: [node1] => (item=# Ansible inventory hosts BEGIN) 
skipping: [node1] => (item=192.168.7.128 node1.cluster.local node1) 
skipping: [node1] => (item=# Ansible inventory hosts END) 

TASK [kubernetes/preinstall : Hosts | Update target hosts file entries dict with required entries] ***
ok: [node1] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}})
ok: [node1] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}})

TASK [kubernetes/preinstall : Hosts | Update (if necessary) hosts file] ********
ok: [node1] => (item={'key': '127.0.0.1', 'value': ['localhost', 'localhost.localdomain']})
ok: [node1] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']})

TASK [kubernetes/preinstall : Update facts] ************************************
ok: [node1]

TASK [kubernetes/preinstall : Configure dhclient to supersede search/domain/nameservers] ***
skipping: [node1]

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (non-RH)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (RH-only)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Remove kubespray specific config from dhclient config] ***
ok: [node1]

TASK [kubernetes/preinstall : Remove kubespray specific dhclient hook] *********
ok: [node1]

TASK [kubernetes/preinstall : Check if we are running inside a Azure VM] *******
ok: [node1]

TASK [kubernetes/preinstall : install growpart] ********************************
skipping: [node1]

TASK [kubernetes/preinstall : check if growpart needs to be run] ***************
skipping: [node1]

TASK [kubernetes/preinstall : check fs type] ***********************************
skipping: [node1]

TASK [kubernetes/preinstall : run growpart] ************************************
skipping: [node1]

TASK [kubernetes/preinstall : run xfs_growfs] **********************************
skipping: [node1]

TASK [container-engine/kata-containers : Download artifacts] *******************
skipping: [node1]

TASK [container-engine/kata-containers : Create config directory] **************
skipping: [node1]

TASK [container-engine/kata-containers : Set configuration] ********************
skipping: [node1] => (item=configuration-qemu.toml) 

TASK [container-engine/kata-containers : Set containerd bin] *******************
skipping: [node1] => (item=qemu) 

TASK [container-engine/crun : Create binary destination folder] ****************
skipping: [node1]

TASK [container-engine/crun : Check if binary exists] **************************
skipping: [node1]

TASK [container-engine/crun : Download binary] *********************************
skipping: [node1]

TASK [container-engine/cri-o : check if fedora coreos] *************************
skipping: [node1]

TASK [container-engine/cri-o : set is_ostree] **********************************
skipping: [node1]

TASK [container-engine/cri-o : gather os specific variables] *******************
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/cri-o/vars/../vars/ubuntu.yml) 

TASK [container-engine/cri-o : disable unified_cgroup_hierarchy in Fedora 31+] ***
skipping: [node1]

TASK [container-engine/cri-o : reboot in Fedora 31+] ***************************
skipping: [node1]

TASK [container-engine/cri-o : CRI-O kubic repo name for debian os family] *****
skipping: [node1]

TASK [container-engine/cri-o : Add CRI-O kubic apt repo key] *******************
skipping: [node1]

TASK [container-engine/cri-o : Add CRI-O kubic apt repo] ***********************
skipping: [node1]

TASK [container-engine/cri-o : Add CRI-O kubic cri-o apt repo] *****************
skipping: [node1]

TASK [container-engine/cri-o : Add CRI-O kubic yum repo] ***********************
skipping: [node1]

TASK [container-engine/cri-o : Add CRI-O kubic yum repo] ***********************
skipping: [node1]

TASK [container-engine/cri-o : Enable modular repos for CRI-O] *****************
skipping: [node1] => (item={'repo': 'fedora-updates-modular', 'section': 'updates-modular'}) 
skipping: [node1] => (item={'repo': 'fedora-modular', 'section': 'fedora-modular'}) 

TASK [container-engine/cri-o : Enable CRI-O module] ****************************
skipping: [node1]

TASK [include_role : container-engine/crictl] **********************************
skipping: [node1]

TASK [container-engine/cri-o : Build a list of crio runtimes with Katacontainers runtimes] ***
skipping: [node1]

TASK [container-engine/cri-o : Build a list of crio runtimes with crun runtime] ***
skipping: [node1]

TASK [container-engine/cri-o : Make sure needed folders exist in the system] ***
skipping: [node1] => (item=/etc/crio) 
skipping: [node1] => (item=/etc/containers) 
skipping: [node1] => (item=/etc/systemd/system/crio.service.d) 

TASK [container-engine/cri-o : Install cri-o config] ***************************
skipping: [node1]

TASK [container-engine/cri-o : Add skopeo pkg to install] **********************
skipping: [node1]

TASK [container-engine/cri-o : Install cri-o packages] *************************
skipping: [node1]

TASK [container-engine/cri-o : Check if already installed] *********************
skipping: [node1]

TASK [container-engine/cri-o : Install cri-o packages with osttree] ************
skipping: [node1]

TASK [container-engine/cri-o : Reboot immediately for updated ostree] **********
skipping: [node1]

TASK [container-engine/cri-o : Remove example CNI configs] *********************
skipping: [node1] => (item=100-crio-bridge.conf) 
skipping: [node1] => (item=200-loopback.conf) 

TASK [container-engine/cri-o : Copy mounts.conf] *******************************
skipping: [node1]

TASK [container-engine/cri-o : Create directory for oci hooks] *****************
skipping: [node1]

TASK [container-engine/cri-o : Remove metacopy mount options for older kernels] ***
skipping: [node1]

TASK [container-engine/cri-o : Create directory registries configs] ************
skipping: [node1]

TASK [container-engine/cri-o : Write registries mirror configs] ****************

TASK [container-engine/cri-o : Write cri-o proxy drop-in] **********************
skipping: [node1]

TASK [container-engine/cri-o : Ensure crio service is started and enabled] *****
skipping: [node1]

TASK [container-engine/cri-o : Trigger service restart only when needed] *******
skipping: [node1]

TASK [container-engine/cri-o : Verify that crio is running] ********************
skipping: [node1]

TASK [container-engine/containerd-common : gather os specific variables] *******
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/containerd-common/vars/../vars/ubuntu.yml) 

TASK [container-engine/containerd : check if fedora coreos] ********************
skipping: [node1]

TASK [container-engine/containerd : set is_ostree] *****************************
skipping: [node1]

TASK [container-engine/containerd : Fail containerd setup if distribution is not supported] ***
skipping: [node1]

TASK [container-engine/containerd : gather os specific variables] **************
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/containerd/vars/../vars/ubuntu.yml) 

TASK [container-engine/containerd : disable unified_cgroup_hierarchy in Fedora 31+] ***
skipping: [node1]

TASK [container-engine/containerd : reboot in Fedora 31+] **********************
skipping: [node1]

TASK [container-engine/containerd : include_tasks] *****************************
skipping: [node1]

TASK [container-engine/containerd : Create containerd service systemd directory if it doesn't exist] ***
skipping: [node1]

TASK [container-engine/containerd : Write containerd proxy drop-in] ************
skipping: [node1]

TASK [container-engine/containerd : ensure containerd config directory] ********
skipping: [node1]

TASK [container-engine/containerd : Copy containerd config file] ***************
skipping: [node1]

TASK [container-engine/containerd : Set containerd pin priority to apt_preferences on Debian family] ***
skipping: [node1]

TASK [container-engine/containerd : ensure containerd packages are installed] ***
skipping: [node1] => (item=) 

TASK [include_role : container-engine/crictl] **********************************
skipping: [node1]

TASK [container-engine/containerd-common : gather os specific variables] *******
ok: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/containerd-common/vars/../vars/ubuntu.yml)

TASK [container-engine/docker-storage : docker-storage-setup | install git and make] ***
skipping: [node1] => (item=git) 
skipping: [node1] => (item=make) 

TASK [container-engine/docker-storage : docker-storage-setup | docker-storage-setup sysconfig template] ***
skipping: [node1]

TASK [container-engine/docker-storage : docker-storage-override-directory | docker service storage-setup override dir] ***
skipping: [node1]

TASK [container-engine/docker-storage : docker-storage-override | docker service storage-setup override file] ***
skipping: [node1]

TASK [container-engine/docker-storage : docker-storage-setup | install lvm2] ***
skipping: [node1]

TASK [container-engine/docker-storage : docker-storage-setup | install and run container-storage-setup] ***
skipping: [node1]

TASK [container-engine/docker : check if fedora coreos] ************************
ok: [node1]

TASK [container-engine/docker : set is_ostree] *********************************
ok: [node1]

TASK [container-engine/docker : gather os specific variables] ******************
ok: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/docker/vars/../vars/ubuntu.yml)

TASK [container-engine/docker : Warn about Docker version on SUSE] *************
skipping: [node1]

TASK [container-engine/docker : include_tasks] *********************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/container-engine/docker/tasks/set_facts_dns.yml for node1

TASK [container-engine/docker : set dns server for docker] *********************
ok: [node1]

TASK [container-engine/docker : show docker_dns_servers] ***********************
ok: [node1] => {
    "msg": [
        "10.233.0.3"
    ]
}

TASK [container-engine/docker : add upstream dns servers] **********************
ok: [node1]

TASK [container-engine/docker : add global searchdomains] **********************
ok: [node1]

TASK [container-engine/docker : check system nameservers] **********************
ok: [node1]

TASK [container-engine/docker : check system search domains] *******************
ok: [node1]

TASK [container-engine/docker : add system nameservers to docker options] ******
ok: [node1]

TASK [container-engine/docker : add system search domains to docker options] ***
ok: [node1]

TASK [container-engine/docker : check number of nameservers] *******************
skipping: [node1]

TASK [container-engine/docker : rtrim number of nameservers to 3] **************
skipping: [node1]

TASK [container-engine/docker : check number of search domains] ****************
skipping: [node1]

TASK [container-engine/docker : check length of search domains] ****************
skipping: [node1]

TASK [container-engine/docker : disable unified_cgroup_hierarchy in Fedora 31+] ***
skipping: [node1]

TASK [container-engine/docker : reboot in Fedora 31+] **************************
skipping: [node1]

TASK [container-engine/docker : Remove legacy docker repo file] ****************
skipping: [node1]

TASK [container-engine/docker : Ensure old versions of Docker are not installed. | Debian] ***
ok: [node1]

TASK [container-engine/docker : Ensure old versions of Docker are not installed. | RedHat] ***
skipping: [node1]

TASK [container-engine/docker : ensure docker-ce repository public key is installed] ***
ok: [node1] => (item=9DC858229FC7DD38854AE2D88D81803C0EBFCD88)

TASK [container-engine/docker : ensure docker-ce repository is enabled] ********
ok: [node1] => (item=deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
)

TASK [container-engine/docker : Configure docker repository on Fedora] *********
skipping: [node1]

TASK [container-engine/docker : Configure docker repository on RedHat/CentOS/Oracle Linux] ***
skipping: [node1]

TASK [container-engine/docker : check if container-selinux is available] *******
skipping: [node1]

TASK [container-engine/docker : Configure extras repository on RedHat/CentOS if container-selinux is not available in current repos] ***
skipping: [node1]

TASK [container-engine/docker : ensure docker packages are installed] **********
ok: [node1] => (item={'name': 'containerd.io=1.3.9-1', 'force': True})
ok: [node1] => (item={'name': 'docker-ce-cli=5:19.03.14~3-0~ubuntu-focal', 'force': True})
ok: [node1] => (item={'name': 'docker-ce=5:19.03.14~3-0~ubuntu-focal', 'force': True})

TASK [container-engine/docker : Ensure docker packages are installed] **********
skipping: [node1] => (item={'name': 'containerd.io=1.3.9-1', 'force': True}) 
skipping: [node1] => (item={'name': 'docker-ce-cli=5:19.03.14~3-0~ubuntu-focal', 'force': True}) 
skipping: [node1] => (item={'name': 'docker-ce=5:19.03.14~3-0~ubuntu-focal', 'force': True}) 

TASK [container-engine/docker : Tell Debian hosts not to change the docker version with apt upgrade] ***
ok: [node1] => (item=docker-ce)
ok: [node1] => (item=docker-ce-cli)

TASK [container-engine/docker : scp ntpd to host] ******************************
ok: [node1]

TASK [container-engine/docker : Restart Docker] ********************************
changed: [node1]

TASK [container-engine/docker : ensure service is started if docker packages are already present] ***
ok: [node1]
[WARNING]: flush_handlers task does not support when conditional

TASK [container-engine/docker : include_tasks] *********************************

TASK [container-engine/docker : Create docker service systemd directory if it doesn't exist] ***
ok: [node1]

TASK [container-engine/docker : Write docker proxy drop-in] ********************
skipping: [node1]

TASK [container-engine/docker : get systemd version] ***************************
ok: [node1]

TASK [container-engine/docker : Write docker.service systemd file] *************
ok: [node1]

TASK [container-engine/docker : Write docker options systemd drop-in] **********
ok: [node1]

TASK [container-engine/docker : Write docker dns systemd drop-in] **************
ok: [node1]

TASK [container-engine/docker : Copy docker orphan clean up script to the node] ***
skipping: [node1]

TASK [container-engine/docker : Write docker orphan clean up systemd drop-in] ***
skipping: [node1]

TASK [container-engine/docker : ensure docker service is started and enabled] ***
ok: [node1] => (item=docker)

TASK [download : prep_download | Set a few facts] ******************************
ok: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
ok: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
ok: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/prep_kubeadm_images.yml for node1

TASK [download : prep_kubeadm_images | Check kubeadm version matches kubernetes version] ***
skipping: [node1]

TASK [download : prep_kubeadm_images | Download kubeadm binary] ****************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/kubeadm"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : prep_kubeadm_images | Create kubeadm config] ******************
ok: [node1]

TASK [download : prep_kubeadm_images | Copy kubeadm binary from download dir to system path] ***
ok: [node1]

TASK [download : prep_kubeadm_images | Set kubeadm binary permissions] *********
ok: [node1]

TASK [download : prep_kubeadm_images | Generate list of required images] *******
ok: [node1]

TASK [download : prep_kubeadm_images | Parse list of images] *******************
ok: [node1] => (item=harbor.dev.rdev.tech/kubesprary/kube-apiserver:v1.19.7)
ok: [node1] => (item=harbor.dev.rdev.tech/kubesprary/kube-controller-manager:v1.19.7)
ok: [node1] => (item=harbor.dev.rdev.tech/kubesprary/kube-scheduler:v1.19.7)
ok: [node1] => (item=harbor.dev.rdev.tech/kubesprary/kube-proxy:v1.19.7)

TASK [download : prep_kubeadm_images | Convert list of images to dict for later use] ***
ok: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_file.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/download_container.yml for node1

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/coreos/etcd"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/coreos/etcd:v3.4.13 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/kubeadm"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/kubelet"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/kubectl"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : download_file | Starting download of file] ********************
ok: [node1] => {
    "msg": "http://192.168.80.48/calicoctl-linux-amd64"
}

TASK [download : download_file | Set pathname of cached file] ******************
ok: [node1]

TASK [download : download_file | Create dest directory on node] ****************
ok: [node1]

TASK [download : download_file | Create local cache directory] *****************
skipping: [node1]

TASK [download : download_file | Create cache directory on download_delegate host] ***
skipping: [node1]

TASK [download : download_file | Download item] ********************************
ok: [node1 -> 192.168.7.128]

TASK [download : download_file | Copy file back to ansible host file cache] ****
skipping: [node1]

TASK [download : download_file | Copy file from cache to nodes, if it is available] ***
skipping: [node1]

TASK [download : download_file | Set mode and owner] ***************************
skipping: [node1]

TASK [download : download_file | Extract file archives] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/extract_file.yml for node1

TASK [download : extract_file | Unpacking archive] *****************************
skipping: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/calico/node"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/calico/node:v3.16.5 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/calico/cni"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/calico/cni:v3.16.5 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/calico/kube-controllers"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/calico/kube-controllers:v3.16.5 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/pause"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/pause:3.3 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/library/nginx"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/library/nginx:1.19 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/coredns"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/coredns:1.7.0 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache:1.16.0 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64:1.8.3 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller:v0.41.2 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/kube-apiserver"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/kube-apiserver:v1.19.7 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/kube-controller-manager"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/kube-controller-manager:v1.19.7 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/kube-scheduler"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/kube-scheduler:v1.19.7 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

TASK [download : set default values for flag variables] ************************
ok: [node1]

TASK [download : set_container_facts | Display the name of the image being processed] ***
ok: [node1] => {
    "msg": "harbor.dev.rdev.tech/kubesprary/kube-proxy"
}

TASK [download : set_container_facts | Set if containers should be pulled by digest] ***
ok: [node1]

TASK [download : set_container_facts | Define by what name to pull the image] ***
ok: [node1]

TASK [download : set_container_facts | Define file name of image] **************
ok: [node1]

TASK [download : set_container_facts | Define path of image] *******************
ok: [node1]

TASK [download : Set image save/load command for containerd] *******************
skipping: [node1]

TASK [download : Set image save/load command for crio] *************************
skipping: [node1]

TASK [download : Set image save/load command for containerd on localhost] ******
skipping: [node1]

TASK [download : Set image save/load command for crio on localhost] ************
skipping: [node1]

TASK [download : download_container | Prepare container download] **************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/download/tasks/check_pull_required.yml for node1

TASK [download : check_pull_required |  Generate a list of information about the images on a node] ***
ok: [node1]

TASK [download : check_pull_required | Set pull_required if the desired image is not yet loaded] ***
ok: [node1]

TASK [download : check_pull_required | Check that the local digest sha256 corresponds to the given image tag] ***
skipping: [node1]

TASK [download : debug] ********************************************************
ok: [node1] => {
    "msg": "Pull harbor.dev.rdev.tech/kubesprary/kube-proxy:v1.19.7 required is: False"
}

TASK [download : download_container | Determine if image is in cache] **********
skipping: [node1]

TASK [download : download_container | Set fact indicating if image is in cache] ***
skipping: [node1]

TASK [download : Stop if image not in cache on ansible host when download_force_cache=true] ***
skipping: [node1]

TASK [download : download_container | Download image if required] **************
skipping: [node1]

TASK [download : download_container | Save and compress image] *****************
skipping: [node1]

TASK [download : download_container | Copy image to ansible host cache] ********
skipping: [node1]

TASK [download : download_container | Upload image to node if it is cached] ****
skipping: [node1]

TASK [download : download_container | Load image into docker] ******************
skipping: [node1]

TASK [download : download_container | Remove container image from cache] *******
ok: [node1]

PLAY [etcd] ********************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [adduser : User | Create User Group] **************************************
ok: [node1]

TASK [adduser : User | Create User] ********************************************
ok: [node1]

TASK [adduser : User | Create User Group] **************************************
ok: [node1]

TASK [adduser : User | Create User] ********************************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/check_certs.yml for node1

TASK [etcd : Check_certs | check if all certs have already been generated on first master] ***
ok: [node1 -> 192.168.7.128]

TASK [etcd : Check_certs | Set default value for 'sync_certs', 'gen_certs' and 'etcd_secret_changed' to false] ***
ok: [node1]

TASK [etcd : Check certs | check if a cert already exists on node] *************
ok: [node1] => (item=ca.pem)
ok: [node1] => (item=node-node1-key.pem)

TASK [etcd : Check_certs | Set 'gen_certs' to true] ****************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 
ok: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem)

TASK [etcd : Check_certs | Set 'gen_master_certs' to true] *********************
ok: [node1]

TASK [etcd : Check_certs | Set 'gen_node_certs' to true] ***********************
ok: [node1]

TASK [etcd : Check_certs | Set 'sync_certs' to true] ***************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/gen_certs_script.yml for node1

TASK [etcd : Gen_certs | create etcd cert dir] *********************************
ok: [node1]

TASK [etcd : Gen_certs | create etcd script dir (on node1)] ********************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | create etcd cert dir (on node1)] **********************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | write openssl config] *********************************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | copy certs generation script] *************************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | run cert generation script] ***************************
changed: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | Gather etcd master certs] *****************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 

TASK [etcd : Gen_certs | Write etcd master certs] ******************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 

TASK [etcd : Gen_certs | Set cert names per node] ******************************
ok: [node1]

TASK [etcd : Check_certs | Set 'sync_certs' to true on nodes] ******************
skipping: [node1] => (item=ca.pem) 
skipping: [node1] => (item=node-node1.pem) 
skipping: [node1] => (item=node-node1-key.pem) 

TASK [etcd : Gen_certs | Gather node certs] ************************************
skipping: [node1]

TASK [etcd : Gen_certs | Copy certs on nodes] **********************************
skipping: [node1]

TASK [etcd : Gen_certs | check certificate permissions] ************************
changed: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/upd_ca_trust.yml for node1

TASK [etcd : Gen_certs | target ca-certificate store file] *********************
ok: [node1]

TASK [etcd : Gen_certs | add CA to trusted CA dir] *****************************
ok: [node1]

TASK [etcd : Gen_certs | update ca-certificates (Debian/Ubuntu/SUSE/Flatcar)] ***
skipping: [node1]

TASK [etcd : Gen_certs | update ca-certificates (RedHat)] **********************
skipping: [node1]

TASK [etcd : Gen_certs | update ca-certificates (ClearLinux)] ******************
skipping: [node1]

TASK [etcd : Gen_certs | Get etcd certificate serials] *************************
ok: [node1]

TASK [etcd : Set etcd_client_cert_serial] **************************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/install_docker.yml for node1

TASK [etcd : Install | Copy etcdctl binary from docker container] **************
ok: [node1]

TASK [etcd : Install etcd launch script] ***************************************
ok: [node1]

TASK [etcd : Install etcd-events launch script] ********************************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/configure.yml for node1

TASK [etcd : Configure | Check if etcd cluster is healthy] *********************
ok: [node1]

TASK [etcd : Configure | Check if etcd-events cluster is healthy] **************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
ok: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

TASK [etcd : Configure | Copy etcd.service systemd file] ***********************
ok: [node1]

TASK [etcd : Configure | Copy etcd-events.service systemd file] ****************
skipping: [node1]

TASK [etcd : Configure | reload systemd] ***************************************
ok: [node1]

TASK [etcd : Configure | Ensure etcd is running] *******************************
ok: [node1]

TASK [etcd : Configure | Ensure etcd-events is running] ************************
skipping: [node1]

TASK [etcd : Configure | Wait for etcd cluster to be healthy] ******************
ok: [node1]

TASK [etcd : Configure | Wait for etcd-events cluster to be healthy] ***********
skipping: [node1]

TASK [etcd : Configure | Check if member is in etcd cluster] *******************
ok: [node1]

TASK [etcd : Configure | Check if member is in etcd-events cluster] ************
skipping: [node1]

TASK [etcd : Configure | Join member(s) to etcd cluster one at a time] *********
skipping: [node1] => (item=node1) 

TASK [etcd : Configure | Join member(s) to etcd-events cluster one at a time] ***
skipping: [node1] => (item=node1) 

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
ok: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

TASK [etcd : Restart etcd if certs changed] ************************************
skipping: [node1]

TASK [etcd : Restart etcd-events if certs changed] *****************************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
ok: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

RUNNING HANDLER [etcd : set etcd_secret_changed] *******************************
ok: [node1]

PLAY [k8s-cluster] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [adduser : User | Create User Group] **************************************
ok: [node1]

TASK [adduser : User | Create User] ********************************************
ok: [node1]

TASK [adduser : User | Create User Group] **************************************
ok: [node1]

TASK [adduser : User | Create User] ********************************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/check_certs.yml for node1

TASK [etcd : Check_certs | check if all certs have already been generated on first master] ***
ok: [node1 -> 192.168.7.128]

TASK [etcd : Check_certs | Set default value for 'sync_certs', 'gen_certs' and 'etcd_secret_changed' to false] ***
ok: [node1]

TASK [etcd : Check certs | check if a cert already exists on node] *************
ok: [node1] => (item=ca.pem)
ok: [node1] => (item=node-node1-key.pem)

TASK [etcd : Check_certs | Set 'gen_certs' to true] ****************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 
ok: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem)
ok: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem)

TASK [etcd : Check_certs | Set 'gen_master_certs' to true] *********************
ok: [node1]

TASK [etcd : Check_certs | Set 'gen_node_certs' to true] ***********************
ok: [node1]

TASK [etcd : Check_certs | Set 'sync_certs' to true] ***************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/gen_certs_script.yml for node1

TASK [etcd : Gen_certs | create etcd cert dir] *********************************
ok: [node1]

TASK [etcd : Gen_certs | create etcd script dir (on node1)] ********************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | create etcd cert dir (on node1)] **********************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | write openssl config] *********************************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | copy certs generation script] *************************
ok: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | run cert generation script] ***************************
changed: [node1 -> 192.168.7.128]

TASK [etcd : Gen_certs | Gather etcd master certs] *****************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 

TASK [etcd : Gen_certs | Write etcd master certs] ******************************
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/ca-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/admin-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/member-node1-key.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1.pem) 
skipping: [node1] => (item=/etc/ssl/etcd/ssl/node-node1-key.pem) 

TASK [etcd : Gen_certs | Set cert names per node] ******************************
ok: [node1]

TASK [etcd : Check_certs | Set 'sync_certs' to true on nodes] ******************
skipping: [node1] => (item=ca.pem) 
skipping: [node1] => (item=node-node1.pem) 
skipping: [node1] => (item=node-node1-key.pem) 

TASK [etcd : Gen_certs | Gather node certs] ************************************
skipping: [node1]

TASK [etcd : Gen_certs | Copy certs on nodes] **********************************
skipping: [node1]

TASK [etcd : Gen_certs | check certificate permissions] ************************
changed: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/upd_ca_trust.yml for node1

TASK [etcd : Gen_certs | target ca-certificate store file] *********************
ok: [node1]

TASK [etcd : Gen_certs | add CA to trusted CA dir] *****************************
ok: [node1]

TASK [etcd : Gen_certs | update ca-certificates (Debian/Ubuntu/SUSE/Flatcar)] ***
skipping: [node1]

TASK [etcd : Gen_certs | update ca-certificates (RedHat)] **********************
skipping: [node1]

TASK [etcd : Gen_certs | update ca-certificates (ClearLinux)] ******************
skipping: [node1]

TASK [etcd : Gen_certs | Get etcd certificate serials] *************************
ok: [node1]

TASK [etcd : Set etcd_client_cert_serial] **************************************
ok: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/install_docker.yml for node1

TASK [etcd : Install | Copy etcdctl binary from docker container] **************
skipping: [node1]

TASK [etcd : Install etcd launch script] ***************************************
skipping: [node1]

TASK [etcd : Install etcd-events launch script] ********************************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/configure.yml for node1

TASK [etcd : Configure | Check if etcd cluster is healthy] *********************
skipping: [node1]

TASK [etcd : Configure | Check if etcd-events cluster is healthy] **************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
skipping: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

TASK [etcd : Configure | Copy etcd.service systemd file] ***********************
skipping: [node1]

TASK [etcd : Configure | Copy etcd-events.service systemd file] ****************
skipping: [node1]

TASK [etcd : Configure | reload systemd] ***************************************
ok: [node1]

TASK [etcd : Configure | Ensure etcd is running] *******************************
skipping: [node1]

TASK [etcd : Configure | Ensure etcd-events is running] ************************
skipping: [node1]

TASK [etcd : Configure | Wait for etcd cluster to be healthy] ******************
skipping: [node1]

TASK [etcd : Configure | Wait for etcd-events cluster to be healthy] ***********
skipping: [node1]

TASK [etcd : Configure | Check if member is in etcd cluster] *******************
skipping: [node1]

TASK [etcd : Configure | Check if member is in etcd-events cluster] ************
skipping: [node1]

TASK [etcd : Configure | Join member(s) to etcd cluster one at a time] *********
skipping: [node1] => (item=node1) 

TASK [etcd : Configure | Join member(s) to etcd-events cluster one at a time] ***
skipping: [node1] => (item=node1) 

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
skipping: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

TASK [etcd : Restart etcd if certs changed] ************************************
skipping: [node1]

TASK [etcd : Restart etcd-events if certs changed] *****************************
skipping: [node1]

TASK [etcd : include_tasks] ****************************************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/etcd/tasks/refresh_config.yml for node1

TASK [etcd : Refresh config | Create etcd config file] *************************
skipping: [node1]

TASK [etcd : Refresh config | Create etcd-events config file] ******************
skipping: [node1]

RUNNING HANDLER [etcd : set etcd_secret_changed] *******************************
ok: [node1]

PLAY [k8s-cluster] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes/node : look up docker cgroup driver] **************************
ok: [node1]

TASK [kubernetes/node : set kubelet_cgroup_driver_detected fact for docker] ****
ok: [node1]

TASK [kubernetes/node : look up crio cgroup driver] ****************************
skipping: [node1]

TASK [kubernetes/node : set kubelet_cgroup_driver_detected fact for crio] ******
skipping: [node1]

TASK [kubernetes/node : set kubelet_cgroup_driver_detected fact for containerd] ***
skipping: [node1]

TASK [kubernetes/node : os specific vars] **************************************
ok: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/kubernetes/node/vars/ubuntu-20.yml)

TASK [kubernetes/node : Pre-upgrade | check if kubelet container exists] *******
ok: [node1]

TASK [kubernetes/node : Pre-upgrade | copy /var/lib/cni from kubelet] **********
skipping: [node1]

TASK [kubernetes/node : Pre-upgrade | ensure kubelet container service is stopped if using host deployment] ***
skipping: [node1]

TASK [kubernetes/node : Pre-upgrade | ensure kubelet container is removed if using host deployment] ***
skipping: [node1]

TASK [kubernetes/node : Ensure /var/lib/cni exists] ****************************
ok: [node1]

TASK [kubernetes/node : install | Copy kubeadm binary from download dir] *******
skipping: [node1]

TASK [kubernetes/node : install | Copy kubelet binary from download dir] *******
ok: [node1]

TASK [kubernetes/node : install | Copy socat wrapper for Container Linux] ******
skipping: [node1]

TASK [kubernetes/node : haproxy | Cleanup potentially deployed haproxy] ********
skipping: [node1]

TASK [kubernetes/node : nginx-proxy | Make nginx directory] ********************
skipping: [node1]

TASK [kubernetes/node : nginx-proxy | Write nginx-proxy configuration] *********
skipping: [node1]

TASK [kubernetes/node : nginx-proxy | Get checksum from config] ****************
skipping: [node1]

TASK [kubernetes/node : nginx-proxy | Write static pod] ************************
skipping: [node1]

TASK [kubernetes/node : haproxy | Cleanup potentially deployed nginx-proxy] ****
skipping: [node1]

TASK [kubernetes/node : haproxy | Make haproxy directory] **********************
skipping: [node1]

TASK [kubernetes/node : haproxy | Write haproxy configuration] *****************
skipping: [node1]

TASK [kubernetes/node : haproxy | Get checksum from config] ********************
skipping: [node1]

TASK [kubernetes/node : haproxy | Write static pod] ****************************
skipping: [node1]

TASK [kubernetes/node : Ensure nodePort range is reserved] *********************
ok: [node1]

TASK [kubernetes/node : Verify if br_netfilter module exists] ******************
ok: [node1]

TASK [kubernetes/node : Verify br_netfilter module path exists] ****************
ok: [node1]

TASK [kubernetes/node : Enable br_netfilter module] ****************************
ok: [node1]

TASK [kubernetes/node : Persist br_netfilter module] ***************************
ok: [node1]

TASK [kubernetes/node : Check if bridge-nf-call-iptables key exists] ***********
ok: [node1]

TASK [kubernetes/node : Enable bridge-nf-call tables] **************************
ok: [node1] => (item=net.bridge.bridge-nf-call-iptables)
ok: [node1] => (item=net.bridge.bridge-nf-call-arptables)
ok: [node1] => (item=net.bridge.bridge-nf-call-ip6tables)

TASK [kubernetes/node : Modprobe Kernel Module for IPVS] ***********************
ok: [node1] => (item=ip_vs)
ok: [node1] => (item=ip_vs_rr)
ok: [node1] => (item=ip_vs_wrr)
ok: [node1] => (item=ip_vs_sh)

TASK [kubernetes/node : Modprobe nf_conntrack_ipv4] ****************************
fatal: [node1]: FAILED! => {"changed": false, "msg": "modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.4.0-80-generic\n", "name": "nf_conntrack_ipv4", "params": "", "rc": 1, "state": "present", "stderr": "modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.4.0-80-generic\n", "stderr_lines": ["modprobe: FATAL: Module nf_conntrack_ipv4 not found in directory /lib/modules/5.4.0-80-generic"], "stdout": "", "stdout_lines": []}
...ignoring

TASK [kubernetes/node : Persist ip_vs modules] *********************************
ok: [node1]

TASK [kubernetes/node : include_tasks] *****************************************
skipping: [node1]

TASK [kubernetes/node : Test if openstack_cacert is a base64 string] ***********
skipping: [node1]

TASK [kubernetes/node : Write cacert file] *************************************
skipping: [node1]

TASK [kubernetes/node : Write cloud-config] ************************************
skipping: [node1]

TASK [kubernetes/node : Make sure dynamic kubelet configuration directory is writeable] ***
skipping: [node1]

TASK [kubernetes/node : Get the kubeadm version] *******************************
ok: [node1]

TASK [kubernetes/node : Set kubelet api version to v1beta1] ********************
ok: [node1]

TASK [kubernetes/node : Write kubelet environment config file (kubeadm)] *******
ok: [node1]

TASK [kubernetes/node : Write kubelet config file] *****************************
ok: [node1]

TASK [kubernetes/node : Write kubelet systemd init file] ***********************
ok: [node1]

TASK [kubernetes/node : Enable kubelet] ****************************************
ok: [node1]

PLAY [kube-master] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes/tokens : Check_tokens | check if the tokens have already been generated on first master] ***
skipping: [node1]

TASK [kubernetes/tokens : Check_tokens | Set default value for 'sync_tokens' and 'gen_tokens' to false] ***
skipping: [node1]

TASK [kubernetes/tokens : Check_tokens | Set 'sync_tokens' and 'gen_tokens' to true] ***
skipping: [node1]

TASK [kubernetes/tokens : Check tokens | check if a cert already exists] *******
skipping: [node1]

TASK [kubernetes/tokens : Check_tokens | Set 'sync_tokens' to true] ************
skipping: [node1]

TASK [kubernetes/tokens : Make sure the tokens directory exits] ****************
skipping: [node1]

TASK [kubernetes/tokens : Gen_tokens | copy tokens generation script] **********
skipping: [node1]

TASK [kubernetes/tokens : Gen_tokens | generate tokens for master components] ***
skipping: [node1] => (item=['system:kubectl', 'node1']) 

TASK [kubernetes/tokens : Gen_tokens | generate tokens for node components] ****
skipping: [node1] => (item=['system:kubelet', 'node1']) 

TASK [kubernetes/tokens : Gen_tokens | Get list of tokens from first master] ***
skipping: [node1]

TASK [kubernetes/tokens : Gen_tokens | Gather tokens] **************************
skipping: [node1]

TASK [kubernetes/tokens : Gen_tokens | Copy tokens on masters] *****************
skipping: [node1]

TASK [kubernetes/master : Pre-upgrade | Delete master manifests if etcd secrets changed] ***
ok: [node1] => (item=kube-apiserver)
ok: [node1] => (item=kube-controller-manager)
ok: [node1] => (item=kube-scheduler)

TASK [kubernetes/master : Pre-upgrade | Delete master containers forcefully] ***
skipping: [node1] => (item=kube-apiserver) 
skipping: [node1] => (item=kube-controller-manager) 
skipping: [node1] => (item=kube-scheduler) 

TASK [kubernetes/master : Create webhook token auth config] ********************
skipping: [node1]

TASK [kubernetes/master : Create webhook authorization config] *****************
skipping: [node1]

TASK [kubernetes/master : Check if secret for encrypting data at rest already exist] ***
skipping: [node1]

TASK [kubernetes/master : Slurp secrets_encryption file if it exists] **********
skipping: [node1]

TASK [kubernetes/master : Base 64 Decode slurped secrets_encryption.yaml file] ***
skipping: [node1]

TASK [kubernetes/master : Extract secret value from secrets_encryption.yaml] ***
skipping: [node1]

TASK [kubernetes/master : Set kube_encrypt_token across master nodes] **********
skipping: [node1] => (item=node1) 

TASK [kubernetes/master : Write secrets for encrypting secret data at rest] ****
skipping: [node1]

TASK [kubernetes/master : Install | Copy kubectl binary from download dir] *****
ok: [node1]

TASK [kubernetes/master : Install kubectl bash completion] *********************
changed: [node1]

TASK [kubernetes/master : Set kubectl bash completion file permissions] ********
ok: [node1]

TASK [kubernetes/master : Disable SecurityContextDeny admission-controller and enable PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes/master : kubeadm | Check if old apiserver cert exists on host] ***
ok: [node1 -> 192.168.7.128]

TASK [kubernetes/master : Copy old certs to the kubeadm expected path] *********
skipping: [node1] => (item={'src': 'apiserver.pem', 'dest': 'apiserver.crt'}) 
skipping: [node1] => (item={'src': 'apiserver-key.pem', 'dest': 'apiserver.key'}) 
skipping: [node1] => (item={'src': 'ca.pem', 'dest': 'ca.crt'}) 
skipping: [node1] => (item={'src': 'ca-key.pem', 'dest': 'ca.key'}) 
skipping: [node1] => (item={'src': 'front-proxy-ca.pem', 'dest': 'front-proxy-ca.crt'}) 
skipping: [node1] => (item={'src': 'front-proxy-ca-key.pem', 'dest': 'front-proxy-ca.key'}) 
skipping: [node1] => (item={'src': 'front-proxy-client.pem', 'dest': 'front-proxy-client.crt'}) 
skipping: [node1] => (item={'src': 'front-proxy-client-key.pem', 'dest': 'front-proxy-client.key'}) 
skipping: [node1] => (item={'src': 'service-account-key.pem', 'dest': 'sa.pub'}) 
skipping: [node1] => (item={'src': 'service-account-key.pem', 'dest': 'sa.key'}) 
skipping: [node1] => (item={'src': 'node-node1.pem', 'dest': 'apiserver-kubelet-client.crt'}) 
skipping: [node1] => (item={'src': 'node-node1-key.pem', 'dest': 'apiserver-kubelet-client.key'}) 

TASK [kubernetes/master : Install OIDC certificate] ****************************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Check serviceaccount key] ******************
ok: [node1]

TASK [kubernetes/master : kubeadm | Check if kubeadm has already run] **********
ok: [node1]

TASK [kubernetes/master : kubeadm | Delete old admin.conf] *********************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Delete old static pods] ********************
skipping: [node1] => (item=kube-apiserver) 
skipping: [node1] => (item=kube-controller-manager) 
skipping: [node1] => (item=kube-scheduler) 
skipping: [node1] => (item=kube-proxy) 

TASK [kubernetes/master : kubeadm | Forcefully delete old static pods] *********
skipping: [node1] => (item=kube-apiserver) 
skipping: [node1] => (item=kube-controller-manager) 
skipping: [node1] => (item=kube-scheduler) 

TASK [kubernetes/master : kubeadm | aggregate all SANs] ************************
ok: [node1]

TASK [kubernetes/master : Create audit-policy directory] ***********************
skipping: [node1]

TASK [kubernetes/master : Write api audit policy yaml] *************************
skipping: [node1]

TASK [kubernetes/master : Write api audit webhook config yaml] *****************
skipping: [node1]

TASK [kubernetes/master : set kubeadm_config_api_fqdn define] ******************
skipping: [node1]

TASK [kubernetes/master : Get the kubeadm version] *****************************
ok: [node1]

TASK [kubernetes/master : Set kubeadm api version to v1beta2] ******************
ok: [node1]

TASK [kubernetes/master : kubeadm | Create kubeadm config] *********************
ok: [node1]

TASK [kubernetes/master : Backup old certs and keys] ***************************
ok: [node1] => (item={'src': 'apiserver.crt', 'dest': 'apiserver.crt.old'})
ok: [node1] => (item={'src': 'apiserver.key', 'dest': 'apiserver.key.old'})
ok: [node1] => (item={'src': 'apiserver-kubelet-client.crt', 'dest': 'apiserver-kubelet-client.crt.old'})
ok: [node1] => (item={'src': 'apiserver-kubelet-client.key', 'dest': 'apiserver-kubelet-client.key.old'})
ok: [node1] => (item={'src': 'front-proxy-client.crt', 'dest': 'front-proxy-client.crt.old'})
ok: [node1] => (item={'src': 'front-proxy-client.key', 'dest': 'front-proxy-client.key.old'})

TASK [kubernetes/master : kubeadm | Check if apiserver.crt contains all needed SANs] ***
ok: [node1] => (item=kubernetes)
ok: [node1] => (item=kubernetes.default)
ok: [node1] => (item=kubernetes.default.svc)
ok: [node1] => (item=kubernetes.default.svc.cluster.local)
ok: [node1] => (item=10.233.0.1)
ok: [node1] => (item=localhost)
ok: [node1] => (item=127.0.0.1)
ok: [node1] => (item=node1)
ok: [node1] => (item=lb-apiserver.kubernetes.local)
ok: [node1] => (item=192.168.7.128)
ok: [node1] => (item=node1.cluster.local)

TASK [kubernetes/master : kubeadm | regenerate apiserver cert 1/2] *************
skipping: [node1] => (item=apiserver.crt) 
skipping: [node1] => (item=apiserver.key) 

TASK [kubernetes/master : kubeadm | regenerate apiserver cert 2/2] *************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Initialize first master] *******************
skipping: [node1]

TASK [kubernetes/master : set kubeadm certificate key] *************************

TASK [kubernetes/master : Create hardcoded kubeadm token for joining nodes with 24h expiration (if defined)] ***
skipping: [node1]

TASK [kubernetes/master : Create kubeadm token for joining nodes with 24h expiration (default)] ***
ok: [node1 -> 192.168.7.128]

TASK [kubernetes/master : Set kubeadm_token] ***********************************
ok: [node1]

TASK [kubernetes/master : kubeadm | Join other masters] ************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/kubernetes/master/tasks/kubeadm-secondary.yml for node1

TASK [kubernetes/master : Set kubeadm_discovery_address] ***********************
ok: [node1]

TASK [kubernetes/master : Upload certificates so they are fresh and not expired] ***
changed: [node1]

TASK [kubernetes/master : Parse certificate key if not set] ********************
ok: [node1]

TASK [kubernetes/master : Create kubeadm ControlPlane config] ******************
skipping: [node1]

TASK [kubernetes/master : Wait for k8s apiserver] ******************************
ok: [node1]

TASK [kubernetes/master : check already run] ***********************************
ok: [node1] => {
    "msg": true
}

TASK [kubernetes/master : Joining control plane node to the cluster.] **********
skipping: [node1]

TASK [kubernetes/master : Set secret_changed to false to avoid extra token rotation] ***
ok: [node1]

TASK [kubernetes/master : kubeadm | upgrade kubernetes cluster] ****************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Check serviceaccount key again] ************
ok: [node1]

TASK [kubernetes/master : kubeadm | Set secret_changed if service account key was updated] ***
skipping: [node1]

TASK [kubernetes/master : kubeadm | Retrieve files to purge] *******************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Purge old certs] ***************************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Purge old kubeconfig] **********************
skipping: [node1]

TASK [kubernetes/master : kubeadm | Remove taint for master with node role] ****
changed: [node1 -> 192.168.7.128]

TASK [kubernetes/master : Include kubeadm etcd extra tasks] ********************
skipping: [node1]

TASK [kubernetes/master : Include kubeadm secondary server apiserver fixes] ****
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/kubernetes/master/tasks/kubeadm-fix-apiserver.yml for node1

TASK [kubernetes/master : Test if correct apiserver is set in all kubeconfigs] ***
ok: [node1]

TASK [kubernetes/master : Create temporary directory] **************************
changed: [node1]

TASK [kubernetes/master : Generate new kubeconfigs with correct apiserver] *****
changed: [node1]

TASK [kubernetes/master : Copy new kubeconfigs to kube config dir] *************
changed: [node1] => (item=admin.conf)
changed: [node1] => (item=controller-manager.conf)
changed: [node1] => (item=kubelet.conf)
changed: [node1] => (item=scheduler.conf)

TASK [kubernetes/master : Cleanup temporary directory] *************************
changed: [node1]

TASK [kubernetes/client : Set external kube-apiserver endpoint] ****************
ok: [node1]

TASK [kubernetes/client : Create kube config dir for current/ansible become user] ***
ok: [node1]

TASK [kubernetes/client : Copy admin kubeconfig to current/ansible become user home] ***
changed: [node1]

TASK [kubernetes/client : Create kube artifacts dir] ***************************
skipping: [node1]

TASK [kubernetes/client : Wait for k8s apiserver] ******************************
ok: [node1]

TASK [kubernetes/client : Create external_kubeconfig dir] **********************
skipping: [node1]

TASK [kubernetes/client : Generate admin kubeconfig with external api endpoint] ***
skipping: [node1]

TASK [kubernetes/client : Convert kubeconfig to YAML] **************************
skipping: [node1]

TASK [kubernetes/client : Override username in kubeconfig] *********************
skipping: [node1]

TASK [kubernetes/client : Write admin kubeconfig on ansible host] **************
skipping: [node1]

TASK [kubernetes/client : Copy kubectl binary to ansible host] *****************
skipping: [node1]

TASK [kubernetes/client : create helper script kubectl.sh on ansible host] *****
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Wait for kube-apiserver] ***
ok: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Check AppArmor status] ***
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Set apparmor_enabled] ***
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Render templates for PodSecurityPolicy] ***
skipping: [node1] => (item={'file': 'psp.yml', 'type': 'psp', 'name': 'psp'}) 
skipping: [node1] => (item={'file': 'psp-cr.yml', 'type': 'clusterrole', 'name': 'psp-cr'}) 
skipping: [node1] => (item={'file': 'psp-crb.yml', 'type': 'rolebinding', 'name': 'psp-crb'}) 

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Add policies, roles, bindings for PodSecurityPolicy] ***
skipping: [node1] => (item=psp.yml) 
skipping: [node1] => (item=psp-cr.yml) 
skipping: [node1] => (item=psp-crb.yml) 

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Add ClusterRoleBinding to admit nodes] ***
ok: [node1]

TASK [kubernetes-apps/cluster_roles : Apply workaround to allow all nodes with cert O=system:nodes to register] ***
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Add webhook ClusterRole that grants access to proxy, stats, log, spec, and metrics on a kubelet] ***
ok: [node1]

TASK [kubernetes-apps/cluster_roles : Apply webhook ClusterRole] ***************
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : Kubernetes Apps | Add ClusterRoleBinding for system:nodes to webhook ClusterRole] ***
ok: [node1]

TASK [kubernetes-apps/cluster_roles : Grant system:nodes the webhook ClusterRole] ***
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : include_tasks] ***************************
skipping: [node1]

TASK [kubernetes-apps/cluster_roles : PriorityClass | Copy k8s-cluster-critical-pc.yml file] ***
ok: [node1]

TASK [kubernetes-apps/cluster_roles : PriorityClass | Create k8s-cluster-critical] ***
ok: [node1]

RUNNING HANDLER [kubernetes/master : Master | Restart kube-scheduler] **********
changed: [node1]

RUNNING HANDLER [kubernetes/master : Master | Restart kube-controller-manager] ***
changed: [node1]

RUNNING HANDLER [kubernetes/master : Master | reload kubelet] ******************
changed: [node1]

RUNNING HANDLER [kubernetes/master : Master | Remove scheduler container docker] ***
changed: [node1]

RUNNING HANDLER [kubernetes/master : Master | Remove scheduler container containerd/crio] ***
skipping: [node1]

RUNNING HANDLER [kubernetes/master : Master | Remove controller manager container docker] ***
changed: [node1]

RUNNING HANDLER [kubernetes/master : Master | Remove controller manager container containerd/crio] ***
skipping: [node1]

RUNNING HANDLER [kubernetes/master : Master | wait for kube-scheduler] *********
FAILED - RETRYING: Master | wait for kube-scheduler (60 retries left).
ok: [node1]

RUNNING HANDLER [kubernetes/master : Master | wait for kube-controller-manager] ***
ok: [node1]

PLAY [k8s-cluster] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes/kubeadm : Set kubeadm_discovery_address] **********************
ok: [node1]

TASK [kubernetes/kubeadm : Check if kubelet.conf exists] ***********************
ok: [node1]

TASK [kubernetes/kubeadm : Check if kubeadm CA cert is accessible] *************
ok: [node1 -> 192.168.7.128]

TASK [kubernetes/kubeadm : Calculate kubeadm CA cert hash] *********************
ok: [node1 -> 192.168.7.128]

TASK [kubernetes/kubeadm : Create kubeadm token for joining nodes with 24h expiration (default)] ***
skipping: [node1]

TASK [kubernetes/kubeadm : Set kubeadm_token to generated token] ***************
skipping: [node1]

TASK [kubernetes/kubeadm : Get the kubeadm version] ****************************
ok: [node1]

TASK [kubernetes/kubeadm : Set kubeadm api version to v1beta2] *****************
ok: [node1]

TASK [kubernetes/kubeadm : Create kubeadm client config] ***********************
skipping: [node1]

TASK [kubernetes/kubeadm : Join to cluster] ************************************
skipping: [node1]

TASK [kubernetes/kubeadm : Display kubeadm join stderr if any] *****************
skipping: [node1]

TASK [kubernetes/kubeadm : Update server field in kubelet kubeconfig] **********
skipping: [node1]

TASK [kubernetes/kubeadm : Update server field in kube-proxy kubeconfig] *******
changed: [node1 -> 192.168.7.128]

TASK [kubernetes/kubeadm : Set ca.crt file permission] *************************
ok: [node1]

TASK [kubernetes/kubeadm : Restart all kube-proxy pods to ensure that they load the new configmap] ***
changed: [node1 -> 192.168.7.128]

TASK [kubernetes/kubeadm : Extract etcd certs from control plane if using etcd kubeadm mode] ***
skipping: [node1]

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/cilium : Cilium | Ensure BFPFS mounted] *******************
skipping: [node1]

TASK [network_plugin/cilium : Cilium | Create Cilium certs directory] **********
skipping: [node1]

TASK [network_plugin/cilium : Cilium | Link etcd certificates for cilium] ******
skipping: [node1] => (item={'s': 'ca.pem', 'd': 'ca_cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1.pem', 'd': 'cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1-key.pem', 'd': 'key.pem'}) 

TASK [network_plugin/cilium : Cilium | Create Cilium node manifests] ***********
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-config.yml', 'type': 'cm'}) 
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-crb.yml', 'type': 'clusterrolebinding'}) 
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-cr.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-ds.yml', 'type': 'ds'}) 
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-deploy.yml', 'type': 'deploy'}) 
skipping: [node1] => (item={'name': 'cilium', 'file': 'cilium-sa.yml', 'type': 'sa'}) 

TASK [network_plugin/cilium : Cilium | Enable portmap addon] *******************
skipping: [node1]

TASK [network_plugin/calico : Check vars defined correctly] ********************
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [network_plugin/calico : Check calico network backend defined correctly] ***
skipping: [node1]

TASK [network_plugin/calico : Check ipip and vxlan mode defined correctly] *****
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [network_plugin/calico : Check ipip and vxlan mode if simultaneously enabled] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [network_plugin/calico : Check ipip and vxlan mode if simultaneously enabled] ***
skipping: [node1]

TASK [network_plugin/calico : Get Calico default-pool configuration] ***********
ok: [node1 -> 192.168.7.128]

TASK [network_plugin/calico : Set calico_pool_conf] ****************************
ok: [node1]

TASK [network_plugin/calico : Check if inventory match current cluster configuration] ***
ok: [node1] => {
    "changed": false,
    "msg": "All assertions passed"
}

TASK [network_plugin/calico : Slurp CNI config] ********************************
ok: [node1]

TASK [network_plugin/calico : Set fact calico_cni_config from slurped CNI config] ***
ok: [node1]

TASK [network_plugin/calico : Set fact calico_datastore to etcd if needed] *****
skipping: [node1]

TASK [network_plugin/calico : Calico | Get kubelet hostname] *******************
skipping: [node1]

TASK [network_plugin/calico : include_tasks] ***********************************
included: /mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/network_plugin/calico/tasks/install.yml for node1

TASK [network_plugin/calico : Calico | Copy calicoctl binary from download dir] ***
ok: [node1]

TASK [network_plugin/calico : Calico | Check if host has NetworkManager] *******
ok: [node1]

TASK [network_plugin/calico : Calico | Ensure NetworkManager conf.d dir] *******
ok: [node1]

TASK [network_plugin/calico : Calico | Prevent NetworkManager from managing Calico interfaces] ***
ok: [node1]

TASK [network_plugin/calico : Calico | Write Calico cni config] ****************
ok: [node1]

TASK [network_plugin/calico : Calico | Create calico certs directory] **********
skipping: [node1]

TASK [network_plugin/calico : Calico | Link etcd certificates for calico-node] ***
skipping: [node1] => (item={'s': 'ca.pem', 'd': 'ca_cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1.pem', 'd': 'cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1-key.pem', 'd': 'key.pem'}) 

TASK [network_plugin/calico : Calico | Generate typha certs] *******************
skipping: [node1]

TASK [network_plugin/calico : Calico | Install calicoctl wrapper script] *******
ok: [node1]

TASK [network_plugin/calico : Calico | wait for etcd] **************************
skipping: [node1]

TASK [network_plugin/calico : Calico | Check if calico network pool has already been configured] ***
ok: [node1]

TASK [network_plugin/calico : Calico | Ensure that calico_pool_cidr is within kube_pods_subnet when defined] ***
skipping: [node1]

TASK [network_plugin/calico : Calico | Create calico manifests for kdd] ********
ok: [node1] => (item={'name': 'calico', 'file': 'kdd-crds.yml', 'type': 'kdd'})

TASK [network_plugin/calico : Calico | Create Calico Kubernetes datastore resources] ***
ok: [node1] => (item=kdd-crds.yml)

TASK [network_plugin/calico : Calico | Configure calico network pool] **********
skipping: [node1]

TASK [network_plugin/calico : Populate Service External IPs] *******************

TASK [network_plugin/calico : Determine nodeToNodeMesh needed state] ***********
skipping: [node1]

TASK [network_plugin/calico : Calico | Set up BGP Configuration] ***************
ok: [node1]

TASK [network_plugin/calico : Calico | Configure peering with router(s) at global scope] ***
skipping: [node1]

TASK [network_plugin/calico : Calico | Configure peering with route reflectors at global scope] ***

TASK [network_plugin/calico : Calico | Configure route reflectors to peer with each other] ***

TASK [network_plugin/calico : Calico | Create calico manifests] ****************
ok: [node1] => (item={'name': 'calico-config', 'file': 'calico-config.yml', 'type': 'cm'})
ok: [node1] => (item={'name': 'calico-node', 'file': 'calico-node.yml', 'type': 'ds'})
ok: [node1] => (item={'name': 'calico', 'file': 'calico-node-sa.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'calico', 'file': 'calico-cr.yml', 'type': 'clusterrole'})
ok: [node1] => (item={'name': 'calico', 'file': 'calico-crb.yml', 'type': 'clusterrolebinding'})

TASK [network_plugin/calico : Calico | Create calico manifests for typha] ******
skipping: [node1] => (item={'name': 'calico', 'file': 'calico-typha.yml', 'type': 'typha'}) 

TASK [network_plugin/calico : Start Calico resources] **************************
ok: [node1] => (item=calico-config.yml)
ok: [node1] => (item=calico-node.yml)
ok: [node1] => (item=calico-node-sa.yml)
ok: [node1] => (item=calico-cr.yml)
ok: [node1] => (item=calico-crb.yml)
ok: [node1] => (item=kdd-crds.yml)
skipping: [node1] => (item=calico-typha.yml) 

TASK [network_plugin/calico : Wait for calico kubeconfig to be created] ********
skipping: [node1]

TASK [network_plugin/calico : Calico | Configure node asNumber for per node peering] ***
skipping: [node1]

TASK [network_plugin/calico : Calico | Configure peering with router(s) at node scope] ***
skipping: [node1]

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/flannel : Flannel | Create Flannel manifests] *************
skipping: [node1] => (item={'name': 'flannel', 'file': 'cni-flannel-rbac.yml', 'type': 'sa'}) 
skipping: [node1] => (item={'name': 'kube-flannel', 'file': 'cni-flannel.yml', 'type': 'ds'}) 

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/weave : Weave | Create manifest] **************************
skipping: [node1]

TASK [network_plugin/weave : Weave | Fix nodePort for Weave] *******************
skipping: [node1]

TASK [network_plugin/canal : Canal | Write Canal cni config] *******************
skipping: [node1]

TASK [network_plugin/canal : Canal | Create canal certs directory] *************
skipping: [node1]

TASK [network_plugin/canal : Canal | Link etcd certificates for canal-node] ****
skipping: [node1] => (item={'s': 'ca.pem', 'd': 'ca_cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1.pem', 'd': 'cert.crt'}) 
skipping: [node1] => (item={'s': 'node-node1-key.pem', 'd': 'key.pem'}) 

TASK [network_plugin/canal : Canal | Set Flannel etcd configuration] ***********
skipping: [node1]

TASK [network_plugin/canal : Canal | Create canal node manifests] **************
skipping: [node1] => (item={'name': 'canal-config', 'file': 'canal-config.yaml', 'type': 'cm'}) 
skipping: [node1] => (item={'name': 'canal-node', 'file': 'canal-node.yaml', 'type': 'ds'}) 
skipping: [node1] => (item={'name': 'canal', 'file': 'canal-node-sa.yml', 'type': 'sa'}) 
skipping: [node1] => (item={'name': 'calico', 'file': 'canal-cr-calico.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'flannel', 'file': 'canal-cr-flannel.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'canal-calico', 'file': 'canal-crb-calico.yml', 'type': 'clusterrolebinding'}) 
skipping: [node1] => (item={'name': 'canal-flannel', 'file': 'canal-crb-flannel.yml', 'type': 'clusterrolebinding'}) 

TASK [network_plugin/canal : Canal | Install calicoctl wrapper script] *********
skipping: [node1]

TASK [network_plugin/canal : Canal | Create network policy directory] **********
skipping: [node1]

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Retrieve Pod Cidr] ********************
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | set node_pod_cidr] ********************
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Retrieve default gateway network interface] ***
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | set node_default_gateway_interface] ***
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Install network gateway interface on debian] ***
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Install macvlan script on centos] *****
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/network_plugin/macvlan/files/ifdown-local) 
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/network_plugin/macvlan/files/ifdown-macvlan) 
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/network_plugin/macvlan/files/ifup-local) 
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/network_plugin/macvlan/files/ifup-macvlan) 

TASK [network_plugin/macvlan : Macvlan | Install post-up script on centos] *****
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Install network gateway interface on centos] ***
skipping: [node1] => (item={'src': 'centos-network-macvlan.cfg', 'dst': 'ifcfg-mac0'}) 
skipping: [node1] => (item={'src': 'centos-routes-macvlan.cfg', 'dst': 'route-mac0'}) 
skipping: [node1] => (item={'src': 'centos-postup-macvlan.cfg', 'dst': 'post-up-mac0'}) 

TASK [network_plugin/macvlan : Macvlan | Install service nat via gateway on Flatcar Container Linux] ***
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Enable service nat via gateway on Flatcar Container Linux] ***
skipping: [node1] => (item=systemctl daemon-reload) 
skipping: [node1] => (item=systemctl enable enable_nat_ouside.service) 

TASK [network_plugin/macvlan : Macvlan | Install network gateway interface on Flatcar Container Linux] ***
skipping: [node1] => (item={'src': 'coreos-device-macvlan.cfg', 'dst': 'macvlan.netdev'}) 
skipping: [node1] => (item={'src': 'coreos-interface-macvlan.cfg', 'dst': 'output.network'}) 
skipping: [node1] => (item={'src': 'coreos-network-macvlan.cfg', 'dst': 'macvlan.network'}) 

TASK [network_plugin/macvlan : Macvlan | Install cni definition for Macvlan] ***
skipping: [node1]

TASK [network_plugin/macvlan : Macvlan | Install loopback definition for Macvlan] ***
skipping: [node1]

TASK [network_plugin/macvlan : Enable net.ipv4.conf.all.arp_notify in sysctl] ***
skipping: [node1]

TASK [network_plugin/kube-ovn : Kube-OVN | Label ovn-db node] ******************
skipping: [node1]

TASK [network_plugin/kube-ovn : Kube-OVN | Create Kube-OVN manifests] **********
skipping: [node1] => (item={'name': 'kube-ovn-crd', 'file': 'cni-kube-ovn-crd.yml'}) 
skipping: [node1] => (item={'name': 'ovn', 'file': 'cni-ovn.yml'}) 
skipping: [node1] => (item={'name': 'kube-ovn', 'file': 'cni-kube-ovn.yml'}) 

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Add annotations on kube-master] ***

TASK [network_plugin/kube-router : kube-router | Add annotations on kube-node] ***

TASK [network_plugin/kube-router : kube-router | Add common annotations on all servers] ***

TASK [network_plugin/kube-router : kube-router | Create config directory] ******
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Create kubeconfig] ************
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Slurp cni config] *************
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Set cni_config variable] ******
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Set host_subnet variable] *****
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Create cni config] ************
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Delete old configuration] *****
skipping: [node1]

TASK [network_plugin/kube-router : kube-router | Create manifest] **************
skipping: [node1]

TASK [network_plugin/ovn4nfv : ovn4nfv | Label control-plane node] *************
skipping: [node1]

TASK [network_plugin/ovn4nfv : ovn4nfv | Create ovn4nfv-k8s manifests] *********
skipping: [node1] => (item={'name': 'ovn-daemonset', 'file': 'ovn-daemonset.yml'}) 
skipping: [node1] => (item={'name': 'ovn4nfv-k8s-plugin', 'file': 'ovn4nfv-k8s-plugin.yml'}) 

TASK [network_plugin/cni : CNI | make sure /opt/cni/bin exists] ****************
skipping: [node1]

TASK [network_plugin/cni : CNI | Copy cni plugins] *****************************
skipping: [node1]

TASK [network_plugin/multus : Multus | Copy manifest files] ********************
skipping: [node1] => (item={'name': 'multus-crd', 'file': 'multus-crd.yml', 'type': 'customresourcedefinition'}) 
skipping: [node1] => (item={'name': 'multus-serviceaccount', 'file': 'multus-serviceaccount.yml', 'type': 'serviceaccount'}) 
skipping: [node1] => (item={'name': 'multus-clusterrole', 'file': 'multus-clusterrole.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'multus-clusterrolebinding', 'file': 'multus-clusterrolebinding.yml', 'type': 'clusterrolebinding'}) 

TASK [network_plugin/multus : Multus | Copy manifest templates] ****************
skipping: [node1] => (item={'name': 'multus-daemonset', 'file': 'multus-daemonset.yml', 'type': 'daemonset'}) 

TASK [kubernetes/node-label : Kubernetes Apps | Wait for kube-apiserver] *******
ok: [node1]

TASK [kubernetes/node-label : Set role node label to empty list] ***************
ok: [node1]

TASK [kubernetes/node-label : Node label for nvidia GPU nodes] *****************
skipping: [node1]

TASK [kubernetes/node-label : Set inventory node label to empty list] **********
ok: [node1]

TASK [kubernetes/node-label : Populate inventory node label] *******************

TASK [kubernetes/node-label : debug] *******************************************
ok: [node1] => {
    "role_node_labels": []
}

TASK [kubernetes/node-label : debug] *******************************************
ok: [node1] => {
    "inventory_node_labels": []
}

TASK [kubernetes/node-label : Set label to node] *******************************

PLAY [calico-rr] ***************************************************************
skipping: no hosts matched

PLAY [kube-master[0]] **********************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Get default token name] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Get default token data] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Test if default certificate is expired] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Determine if certificate is expired] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Get all serviceaccount tokens to expire] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Delete expired tokens] ***
skipping: [node1]

TASK [kubernetes-apps/rotate_tokens : Rotate Tokens | Delete pods in system namespace] ***
skipping: [node1]

TASK [win_nodes/kubernetes_patch : Ensure that user manifests directory exists] ***
ok: [node1]

TASK [win_nodes/kubernetes_patch : Check current nodeselector for kube-proxy daemonset] ***
ok: [node1]

TASK [win_nodes/kubernetes_patch : Apply nodeselector patch for kube-proxy daemonset] ***
skipping: [node1]

TASK [win_nodes/kubernetes_patch : debug] **************************************
skipping: [node1]

TASK [win_nodes/kubernetes_patch : debug] **************************************
skipping: [node1]

PLAY [kube-master] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/openstack : include_tasks] *****
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/openstack : External OpenStack Cloud Controller | Write cacert file] ***
skipping: [node1] => (item=node1) 

TASK [kubernetes-apps/external_cloud_controller/openstack : External OpenStack Cloud Controller | Write External OpenStack cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/openstack : External OpenStack Cloud Controller | Get base64 cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/openstack : External OpenStack Cloud Controller | Generate Manifests] ***
skipping: [node1] => (item={'name': 'external-openstack-cloud-config-secret', 'file': 'external-openstack-cloud-config-secret.yml'}) 
skipping: [node1] => (item={'name': 'external-openstack-cloud-controller-manager-roles', 'file': 'external-openstack-cloud-controller-manager-roles.yml'}) 
skipping: [node1] => (item={'name': 'external-openstack-cloud-controller-manager-role-bindings', 'file': 'external-openstack-cloud-controller-manager-role-bindings.yml'}) 
skipping: [node1] => (item={'name': 'external-openstack-cloud-controller-manager-ds', 'file': 'external-openstack-cloud-controller-manager-ds.yml'}) 

TASK [kubernetes-apps/external_cloud_controller/openstack : External OpenStack Cloud Controller | Apply Manifests] ***
skipping: [node1] => (item=external-openstack-cloud-config-secret.yml) 
skipping: [node1] => (item=external-openstack-cloud-controller-manager-roles.yml) 
skipping: [node1] => (item=external-openstack-cloud-controller-manager-role-bindings.yml) 
skipping: [node1] => (item=external-openstack-cloud-controller-manager-ds.yml) 

TASK [kubernetes-apps/external_cloud_controller/vsphere : include_tasks] *******
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/vsphere : External vSphere Cloud Controller | Generate CPI cloud-config] ***
skipping: [node1] => (item=external-vsphere-cpi-cloud-config) 

TASK [kubernetes-apps/external_cloud_controller/vsphere : External vSphere Cloud Controller | Generate Manifests] ***
skipping: [node1] => (item=external-vsphere-cpi-cloud-config-secret.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-roles.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-role-bindings.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-ds.yml) 

TASK [kubernetes-apps/external_cloud_controller/vsphere : External vSphere Cloud Provider Interface | Create a CPI configMap manifest] ***
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/vsphere : External vSphere Cloud Provider Interface | Apply a CPI configMap manifest] ***
skipping: [node1]

TASK [kubernetes-apps/external_cloud_controller/vsphere : External vSphere Cloud Controller | Apply Manifests] ***
skipping: [node1] => (item=external-vsphere-cpi-cloud-config-secret.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-roles.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-role-bindings.yml) 
skipping: [node1] => (item=external-vsphere-cloud-controller-manager-ds.yml) 

TASK [kubernetes-apps/network_plugin/cilium : Cilium | Start Resources] ********
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-config.yml', 'type': 'cm'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-crb.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-cr.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-ds.yml', 'type': 'ds'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-deploy.yml', 'type': 'deploy'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'cilium', 'file': 'cilium-sa.yml', 'type': 'sa'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/network_plugin/cilium : Cilium | Wait for pods to run] ***
skipping: [node1]

TASK [kubernetes-apps/network_plugin/calico : calico upgrade complete] *********
skipping: [node1]

TASK [kubernetes-apps/network_plugin/canal : Canal | Start Resources] **********
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'canal-config', 'file': 'canal-config.yaml', 'type': 'cm'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'canal-node', 'file': 'canal-node.yaml', 'type': 'ds'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'canal', 'file': 'canal-node-sa.yml', 'type': 'sa'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'calico', 'file': 'canal-cr-calico.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'flannel', 'file': 'canal-cr-flannel.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'canal-calico', 'file': 'canal-crb-calico.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'canal-flannel', 'file': 'canal-crb-flannel.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/network_plugin/flannel : Flannel | Start Resources] ******
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'flannel', 'file': 'cni-flannel-rbac.yml', 'type': 'sa'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'kube-flannel', 'file': 'cni-flannel.yml', 'type': 'ds'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/network_plugin/flannel : Flannel | Wait for flannel subnet.env file presence] ***
skipping: [node1]

TASK [kubernetes-apps/network_plugin/kube-ovn : Kube-OVN | Start Resources] ****
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'kube-ovn-crd', 'file': 'cni-kube-ovn-crd.yml'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'ovn', 'file': 'cni-ovn.yml'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'kube-ovn', 'file': 'cni-kube-ovn.yml'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/network_plugin/weave : Weave | Start Resources] **********
skipping: [node1]

TASK [kubernetes-apps/network_plugin/weave : Weave | Wait for Weave to become available] ***
skipping: [node1]

TASK [kubernetes-apps/network_plugin/kube-router : kube-router | Start Resources] ***
skipping: [node1]

TASK [kubernetes-apps/network_plugin/kube-router : kube-router | Wait for kube-router pods to be ready] ***
skipping: [node1]

TASK [kubernetes-apps/network_plugin/ovn4nfv : ovn4nfv-k8s | Start Resources] ***
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'ovn-daemonset', 'file': 'ovn-daemonset.yml'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'ovn4nfv-k8s-plugin', 'file': 'ovn4nfv-k8s-plugin.yml'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/network_plugin/multus : Multus | Start resources] ********
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'multus-crd', 'file': 'multus-crd.yml', 'type': 'customresourcedefinition'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'multus-serviceaccount', 'file': 'multus-serviceaccount.yml', 'type': 'serviceaccount'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'multus-clusterrole', 'file': 'multus-clusterrole.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'multus-clusterrolebinding', 'file': 'multus-clusterrolebinding.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'multus-daemonset', 'file': 'multus-daemonset.yml', 'type': 'daemonset'}, 'ansible_loop_var': 'item'}) 

TASK [policy_controller/calico : Set cert dir] *********************************
skipping: [node1]

TASK [policy_controller/calico : Create calico-kube-controllers manifests] *****
ok: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-controllers.yml', 'type': 'deployment'})
ok: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-sa.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-cr.yml', 'type': 'clusterrole'})
ok: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-crb.yml', 'type': 'clusterrolebinding'})

TASK [policy_controller/calico : Start of Calico kube controllers] *************
ok: [node1] => (item=calico-kube-controllers.yml)
ok: [node1] => (item=calico-kube-sa.yml)
ok: [node1] => (item=calico-kube-cr.yml)
ok: [node1] => (item=calico-kube-crb.yml)

TASK [policy_controller/calico : Set cert dir] *********************************
skipping: [node1]

TASK [policy_controller/calico : Create calico-kube-controllers manifests] *****
skipping: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-controllers.yml', 'type': 'deployment'}) 
skipping: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-sa.yml', 'type': 'sa'}) 
skipping: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-cr.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'calico-kube-controllers', 'file': 'calico-kube-crb.yml', 'type': 'clusterrolebinding'}) 

TASK [policy_controller/calico : Start of Calico kube controllers] *************
skipping: [node1] => (item=calico-kube-controllers.yml) 
skipping: [node1] => (item=calico-kube-sa.yml) 
skipping: [node1] => (item=calico-kube-cr.yml) 
skipping: [node1] => (item=calico-kube-crb.yml) 

TASK [kubernetes-apps/ingress_controller/ingress_nginx : NGINX Ingress Controller | Create addon dir] ***
ok: [node1]

TASK [kubernetes-apps/ingress_controller/ingress_nginx : NGINX Ingress Controller | Templates list] ***
ok: [node1]

TASK [kubernetes-apps/ingress_controller/ingress_nginx : NGINX Ingress Controller | Append extra templates to NGINX Ingress Templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ingress_nginx : NGINX Ingress Controller | Create manifests] ***
ok: [node1] => (item={'name': '00-namespace', 'file': '00-namespace.yml', 'type': 'ns'})
ok: [node1] => (item={'name': 'cm-ingress-nginx', 'file': 'cm-ingress-nginx.yml', 'type': 'cm'})
ok: [node1] => (item={'name': 'cm-tcp-services', 'file': 'cm-tcp-services.yml', 'type': 'cm'})
ok: [node1] => (item={'name': 'cm-udp-services', 'file': 'cm-udp-services.yml', 'type': 'cm'})
ok: [node1] => (item={'name': 'sa-ingress-nginx', 'file': 'sa-ingress-nginx.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'clusterrole-ingress-nginx', 'file': 'clusterrole-ingress-nginx.yml', 'type': 'clusterrole'})
ok: [node1] => (item={'name': 'clusterrolebinding-ingress-nginx', 'file': 'clusterrolebinding-ingress-nginx.yml', 'type': 'clusterrolebinding'})
ok: [node1] => (item={'name': 'role-ingress-nginx', 'file': 'role-ingress-nginx.yml', 'type': 'role'})
ok: [node1] => (item={'name': 'rolebinding-ingress-nginx', 'file': 'rolebinding-ingress-nginx.yml', 'type': 'rolebinding'})
ok: [node1] => (item={'name': 'ds-ingress-nginx-controller', 'file': 'ds-ingress-nginx-controller.yml', 'type': 'ds'})

TASK [kubernetes-apps/ingress_controller/ingress_nginx : NGINX Ingress Controller | Apply manifests] ***
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 101, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml', '_original_basename': '00-namespace.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': 'ec784415eedb3d4acdc596120302f03ba1597d6c', 'dest': '/etc/kubernetes/addons/ingress_nginx/00-namespace.yml', 'failed': False, 'item': {'name': '00-namespace', 'file': '00-namespace.yml', 'type': 'ns'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 191, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml', '_original_basename': 'cm-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': '21abafe1642e803c0dc8f42d517ac042aacb8758', 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-ingress-nginx.yml', 'failed': False, 'item': {'name': 'cm-ingress-nginx', 'file': 'cm-ingress-nginx.yml', 'type': 'cm'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 190, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml', '_original_basename': 'cm-tcp-services.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': '73fadd9dc75443c74ec6fb32c3af0d6ee5e74725', 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-tcp-services.yml', 'failed': False, 'item': {'name': 'cm-tcp-services', 'file': 'cm-tcp-services.yml', 'type': 'cm'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 190, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml', '_original_basename': 'cm-udp-services.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': 'd27cbf4031b2499e503d3543f8686db88e6a7b89', 'dest': '/etc/kubernetes/addons/ingress_nginx/cm-udp-services.yml', 'failed': False, 'item': {'name': 'cm-udp-services', 'file': 'cm-udp-services.yml', 'type': 'cm'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 196, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml', '_original_basename': 'sa-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': '7dc36b670e034bcc62169c0235b180dbab4a29cc', 'dest': '/etc/kubernetes/addons/ingress_nginx/sa-ingress-nginx.yml', 'failed': False, 'item': {'name': 'sa-ingress-nginx', 'file': 'sa-ingress-nginx.yml', 'type': 'sa'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 883, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml', '_original_basename': 'clusterrole-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': 'bd37fc7c7c23ab9530a0d4e8782338b348462a63', 'dest': '/etc/kubernetes/addons/ingress_nginx/clusterrole-ingress-nginx.yml', 'failed': False, 'item': {'name': 'clusterrole-ingress-nginx', 'file': 'clusterrole-ingress-nginx.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 376, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml', '_original_basename': 'clusterrolebinding-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': 'b398b84183957c90a208c29444b00c4443aa282e', 'dest': '/etc/kubernetes/addons/ingress_nginx/clusterrolebinding-ingress-nginx.yml', 'failed': False, 'item': {'name': 'clusterrolebinding-ingress-nginx', 'file': 'clusterrolebinding-ingress-nginx.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 1535, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml', '_original_basename': 'role-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': '19f0968bc458c89c932efe72ff8fd8ddfd289bee', 'dest': '/etc/kubernetes/addons/ingress_nginx/role-ingress-nginx.yml', 'failed': False, 'item': {'name': 'role-ingress-nginx', 'file': 'role-ingress-nginx.yml', 'type': 'role'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 389, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml', '_original_basename': 'rolebinding-ingress-nginx.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': '784d7187b8125dbe6750d2186613dd24343bdf8b', 'dest': '/etc/kubernetes/addons/ingress_nginx/rolebinding-ingress-nginx.yml', 'failed': False, 'item': {'name': 'rolebinding-ingress-nginx', 'file': 'rolebinding-ingress-nginx.yml', 'type': 'rolebinding'}, 'ansible_loop_var': 'item'})
ok: [node1] => (item={'diff': {'before': {'path': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml'}, 'after': {'path': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml'}}, 'path': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml', 'changed': False, 'uid': 0, 'gid': 0, 'owner': 'root', 'group': 'root', 'mode': '0644', 'state': 'file', 'size': 2825, 'invocation': {'module_args': {'mode': None, 'follow': False, 'dest': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml', '_original_basename': 'ds-ingress-nginx-controller.yml.j2', 'recurse': False, 'state': 'file', 'path': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml', 'force': False, 'modification_time_format': '%Y%m%d%H%M.%S', 'access_time_format': '%Y%m%d%H%M.%S', '_diff_peek': None, 'src': None, 'modification_time': None, 'access_time': None, 'owner': None, 'group': None, 'seuser': None, 'serole': None, 'selevel': None, 'setype': None, 'attributes': None, 'content': None, 'backup': None, 'remote_src': None, 'regexp': None, 'delimiter': None, 'directory_mode': None, 'unsafe_writes': None}}, 'checksum': 'd5ba20969ed08f47aa95f7ae9997d038e288a46b', 'dest': '/etc/kubernetes/addons/ingress_nginx/ds-ingress-nginx-controller.yml', 'failed': False, 'item': {'name': 'ds-ingress-nginx-controller', 'file': 'ds-ingress-nginx-controller.yml', 'type': 'ds'}, 'ansible_loop_var': 'item'})

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | AmbassadorInstallation template] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Create installation manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/ambassador : Ambassador | Apply AmbassadorInstallation] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Remove legacy addon dir and manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Remove legacy namespace] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Wait for Webhook pods become ready] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Create ClusterIssuer manifest] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/cert_manager : Cert Manager | Apply ClusterIssuer manifest] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/alb_ingress_controller : ALB Ingress Controller | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/ingress_controller/alb_ingress_controller : ALB Ingress Controller | Create manifests] ***
skipping: [node1] => (item={'name': 'alb-ingress-clusterrole', 'file': 'alb-ingress-clusterrole.yml', 'type': 'clusterrole'}) 
skipping: [node1] => (item={'name': 'alb-ingress-clusterrolebinding', 'file': 'alb-ingress-clusterrolebinding.yml', 'type': 'clusterrolebinding'}) 
skipping: [node1] => (item={'name': 'alb-ingress-ns', 'file': 'alb-ingress-ns.yml', 'type': 'ns'}) 
skipping: [node1] => (item={'name': 'alb-ingress-sa', 'file': 'alb-ingress-sa.yml', 'type': 'sa'}) 
skipping: [node1] => (item={'name': 'alb-ingress-deploy', 'file': 'alb-ingress-deploy.yml', 'type': 'deploy'}) 

TASK [kubernetes-apps/ingress_controller/alb_ingress_controller : ALB Ingress Controller | Apply manifests] ***
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'alb-ingress-clusterrole', 'file': 'alb-ingress-clusterrole.yml', 'type': 'clusterrole'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'alb-ingress-clusterrolebinding', 'file': 'alb-ingress-clusterrolebinding.yml', 'type': 'clusterrolebinding'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'alb-ingress-ns', 'file': 'alb-ingress-ns.yml', 'type': 'ns'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'alb-ingress-sa', 'file': 'alb-ingress-sa.yml', 'type': 'sa'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'alb-ingress-deploy', 'file': 'alb-ingress-deploy.yml', 'type': 'deploy'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Ensure base dir is created on all hosts] ***
skipping: [node1] => (item=['node1', 'local-storage']) 

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Insert extra templates to Local Volume Provisioner templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_volume_provisioner : Local Volume Provisioner | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Remove legacy addon dir and manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Remove legacy namespace] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Remove legacy storageclass] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Append extra templates to CephFS Provisioner Templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/cephfs_provisioner : CephFS Provisioner | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Remove legacy addon dir and manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Remove legacy namespace] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Remove legacy storageclass] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Append extra templates to RBD Provisioner Templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/rbd_provisioner : RBD Provisioner | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Create claim root dir] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Render Template] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Insert extra templates to Local Path Provisioner templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/external_provisioner/local_path_provisioner : Local Path Provisioner | Apply manifests] ***
skipping: [node1]

PLAY [kube-master] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Wait for kube-apiserver] *****
ok: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Delete kubeadm CoreDNS] ******
ok: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Delete kubeadm Kube-DNS service] ***
ok: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down CoreDNS Template] ***
ok: [node1] => (item={'name': 'coredns', 'module': 'template', 'file': 'coredns-config.yml', 'type': 'configmap'})
ok: [node1] => (item={'name': 'coredns', 'module': 'copy', 'file': 'coredns-sa.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'coredns', 'module': 'template', 'file': 'coredns-deployment.yml', 'type': 'deployment'})
ok: [node1] => (item={'name': 'coredns', 'module': 'template', 'file': 'coredns-svc.yml', 'type': 'svc'})
ok: [node1] => (item={'name': 'coredns', 'module': 'copy', 'file': 'coredns-clusterrole.yml', 'type': 'clusterrole'})
ok: [node1] => (item={'name': 'coredns', 'module': 'copy', 'file': 'coredns-clusterrolebinding.yml', 'type': 'clusterrolebinding'})
ok: [node1] => (item={'name': 'dns-autoscaler', 'module': 'copy', 'file': 'dns-autoscaler-sa.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'dns-autoscaler', 'module': 'copy', 'file': 'dns-autoscaler-clusterrole.yml', 'type': 'clusterrole'})
ok: [node1] => (item={'name': 'dns-autoscaler', 'module': 'copy', 'file': 'dns-autoscaler-clusterrolebinding.yml', 'type': 'clusterrolebinding'})
ok: [node1] => (item={'name': 'dns-autoscaler', 'module': 'template', 'file': 'dns-autoscaler.yml', 'type': 'deployment'})

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down Secondary CoreDNS Template] ***
skipping: [node1] => (item={'name': 'coredns', 'src': 'coredns-deployment.yml', 'file': 'coredns-deployment-secondary.yml', 'type': 'deployment'}) 
skipping: [node1] => (item={'name': 'coredns', 'src': 'coredns-svc.yml', 'file': 'coredns-svc-secondary.yml', 'type': 'svc'}) 
skipping: [node1] => (item={'name': 'dns-autoscaler', 'src': 'dns-autoscaler.yml', 'file': 'coredns-autoscaler-secondary.yml', 'type': 'deployment'}) 

TASK [kubernetes-apps/ansible : Kubernetes Apps | set up necessary nodelocaldns parameters] ***
ok: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down nodelocaldns Template] ***
ok: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-config.yml', 'type': 'configmap'})
ok: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-sa.yml', 'type': 'sa'})
ok: [node1] => (item={'name': 'nodelocaldns', 'file': 'nodelocaldns-daemonset.yml', 'type': 'daemonset'})

TASK [kubernetes-apps/ansible : Kubernetes Apps | Start Resources] *************
ok: [node1] => (item=coredns-config.yml)
ok: [node1] => (item=coredns-sa.yml)
ok: [node1] => (item=coredns-deployment.yml)
ok: [node1] => (item=coredns-svc.yml)
ok: [node1] => (item=coredns-clusterrole.yml)
ok: [node1] => (item=coredns-clusterrolebinding.yml)
ok: [node1] => (item=dns-autoscaler-sa.yml)
ok: [node1] => (item=dns-autoscaler-clusterrole.yml)
ok: [node1] => (item=dns-autoscaler-clusterrolebinding.yml)
ok: [node1] => (item=dns-autoscaler.yml)
skipping: [node1] => (item=coredns-deployment-secondary.yml) 
skipping: [node1] => (item=coredns-svc-secondary.yml) 
skipping: [node1] => (item=coredns-autoscaler-secondary.yml) 
ok: [node1] => (item=nodelocaldns-config.yml)
ok: [node1] => (item=nodelocaldns-sa.yml)
ok: [node1] => (item=nodelocaldns-daemonset.yml)

TASK [kubernetes-apps/ansible : Kubernetes Apps | Netchecker Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Append extra templates to Netchecker Templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay Down Netchecker Template] ***
skipping: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Start Netchecker Resources] ***
skipping: [node1]

TASK [kubernetes-apps/ansible : Kubernetes Apps | Lay down dashboard template] ***
skipping: [node1] => (item={'file': 'dashboard.yml', 'type': 'deploy', 'name': 'kubernetes-dashboard'}) 

TASK [kubernetes-apps/ansible : Kubernetes Apps | Start dashboard] *************
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'file': 'dashboard.yml', 'type': 'deploy', 'name': 'kubernetes-dashboard'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/helm : Helm | Download helm] *****************************
skipping: [node1]

TASK [kubernetes-apps/helm : Copy helm binary from download dir] ***************
skipping: [node1]

TASK [kubernetes-apps/helm : Check if bash_completion.d folder exists] *********
skipping: [node1]

TASK [kubernetes-apps/helm : Get helm completion] ******************************
skipping: [node1]

TASK [kubernetes-apps/helm : Install helm completion] **************************
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Create addon dir] ******************
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Templates list] ********************
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Append extra templates to Registry Templates list for PodSecurityPolicy] ***
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Create manifests] ******************
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Apply manifests] *******************
skipping: [node1]

TASK [kubernetes-apps/registry : Registry | Create PVC manifests] **************
skipping: [node1] => (item={'name': 'registry-pvc', 'file': 'registry-pvc.yml', 'type': 'pvc'}) 

TASK [kubernetes-apps/registry : Registry | Apply PVC manifests] ***************
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'registry-pvc', 'file': 'registry-pvc.yml', 'type': 'pvc'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/metrics_server : Check all masters are node or not] ******
skipping: [node1]

TASK [kubernetes-apps/metrics_server : Metrics Server | Delete addon dir] ******
skipping: [node1]

TASK [kubernetes-apps/metrics_server : Metrics Server | Create addon dir] ******
skipping: [node1]

TASK [kubernetes-apps/metrics_server : Metrics Server | Templates list] ********
skipping: [node1]

TASK [kubernetes-apps/metrics_server : Metrics Server | Create manifests] ******
skipping: [node1]

TASK [kubernetes-apps/metrics_server : Metrics Server | Apply manifests] *******
skipping: [node1]

TASK [kubernetes-apps/csi_driver/csi_crd : CSI CRD | Generate Manifests] *******
skipping: [node1] => (item={'name': 'volumesnapshotclasses', 'file': 'volumesnapshotclasses.yml'}) 
skipping: [node1] => (item={'name': 'volumesnapshotcontents', 'file': 'volumesnapshotcontents.yml'}) 
skipping: [node1] => (item={'name': 'volumesnapshots', 'file': 'volumesnapshots.yml'}) 

TASK [kubernetes-apps/csi_driver/csi_crd : CSI CRD | Apply Manifests] **********
skipping: [node1] => (item=volumesnapshotclasses.yml) 
skipping: [node1] => (item=volumesnapshotcontents.yml) 
skipping: [node1] => (item=volumesnapshots.yml) 

TASK [kubernetes-apps/csi_driver/cinder : include_tasks] ***********************
skipping: [node1]

TASK [kubernetes-apps/csi_driver/cinder : Cinder CSI Driver | Write cacert file] ***
skipping: [node1] => (item=node1) 

TASK [kubernetes-apps/csi_driver/cinder : Cinder CSI Driver | Write Cinder cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/cinder : Cinder CSI Driver | Get base64 cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/cinder : Cinder CSI Driver | Generate Manifests] ***
skipping: [node1] => (item={'name': 'cinder-csi-driver', 'file': 'cinder-csi-driver.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-cloud-config-secret', 'file': 'cinder-csi-cloud-config-secret.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-controllerplugin', 'file': 'cinder-csi-controllerplugin-rbac.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-controllerplugin', 'file': 'cinder-csi-controllerplugin.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-nodeplugin', 'file': 'cinder-csi-nodeplugin-rbac.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-nodeplugin', 'file': 'cinder-csi-nodeplugin.yml'}) 
skipping: [node1] => (item={'name': 'cinder-csi-poddisruptionbudget', 'file': 'cinder-csi-poddisruptionbudget.yml'}) 

TASK [kubernetes-apps/csi_driver/cinder : Cinder CSI Driver | Apply Manifests] ***
skipping: [node1] => (item=cinder-csi-driver.yml) 
skipping: [node1] => (item=cinder-csi-cloud-config-secret.yml) 
skipping: [node1] => (item=cinder-csi-controllerplugin-rbac.yml) 
skipping: [node1] => (item=cinder-csi-controllerplugin.yml) 
skipping: [node1] => (item=cinder-csi-nodeplugin-rbac.yml) 
skipping: [node1] => (item=cinder-csi-nodeplugin.yml) 
skipping: [node1] => (item=cinder-csi-poddisruptionbudget.yml) 

TASK [kubernetes-apps/csi_driver/aws_ebs : AWS CSI Driver | Generate Manifests] ***
skipping: [node1] => (item={'name': 'aws-ebs-csi-driver', 'file': 'aws-ebs-csi-driver.yml'}) 
skipping: [node1] => (item={'name': 'aws-ebs-csi-controllerservice', 'file': 'aws-ebs-csi-controllerservice-rbac.yml'}) 
skipping: [node1] => (item={'name': 'aws-ebs-csi-controllerservice', 'file': 'aws-ebs-csi-controllerservice.yml'}) 
skipping: [node1] => (item={'name': 'aws-ebs-csi-nodeservice', 'file': 'aws-ebs-csi-nodeservice.yml'}) 

TASK [kubernetes-apps/csi_driver/aws_ebs : AWS CSI Driver | Apply Manifests] ***
skipping: [node1] => (item=aws-ebs-csi-driver.yml) 
skipping: [node1] => (item=aws-ebs-csi-controllerservice-rbac.yml) 
skipping: [node1] => (item=aws-ebs-csi-controllerservice.yml) 
skipping: [node1] => (item=aws-ebs-csi-nodeservice.yml) 

TASK [kubernetes-apps/csi_driver/azuredisk : include_tasks] ********************
skipping: [node1]

TASK [kubernetes-apps/csi_driver/azuredisk : Azure CSI Driver | Write Azure CSI cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/azuredisk : Azure CSI Driver | Get base64 cloud-config] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/azuredisk : Azure CSI Driver | Generate Manifests] ***
skipping: [node1] => (item={'name': 'azure-csi-azuredisk-driver', 'file': 'azure-csi-azuredisk-driver.yml'}) 
skipping: [node1] => (item={'name': 'azure-csi-cloud-config-secret', 'file': 'azure-csi-cloud-config-secret.yml'}) 
skipping: [node1] => (item={'name': 'azure-csi-azuredisk-controller', 'file': 'azure-csi-azuredisk-controller-rbac.yml'}) 
skipping: [node1] => (item={'name': 'azure-csi-azuredisk-controller', 'file': 'azure-csi-azuredisk-controller.yml'}) 
skipping: [node1] => (item={'name': 'azure-csi-azuredisk-node', 'file': 'azure-csi-azuredisk-node.yml'}) 
skipping: [node1] => (item={'name': 'azure-csi-node-info-crd.yml.j2', 'file': 'azure-csi-node-info-crd.yml'}) 

TASK [kubernetes-apps/csi_driver/azuredisk : Azure CSI Driver | Apply Manifests] ***
skipping: [node1] => (item=azure-csi-azuredisk-driver.yml) 
skipping: [node1] => (item=azure-csi-cloud-config-secret.yml) 
skipping: [node1] => (item=azure-csi-azuredisk-controller-rbac.yml) 
skipping: [node1] => (item=azure-csi-azuredisk-controller.yml) 
skipping: [node1] => (item=azure-csi-azuredisk-node.yml) 
skipping: [node1] => (item=azure-csi-node-info-crd.yml) 

TASK [kubernetes-apps/csi_driver/gcp_pd : GCP PD CSI Driver | Check if cloud-sa.json exists] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/gcp_pd : GCP PD CSI Driver | Copy GCP credentials file] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/gcp_pd : GCP PD CSI Driver | Get base64 cloud-sa.json] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/gcp_pd : GCP PD CSI Driver | Generate Manifests] ***
skipping: [node1] => (item={'name': 'gcp-pd-csi-cred-secret', 'file': 'gcp-pd-csi-cred-secret.yml'}) 
skipping: [node1] => (item={'name': 'gcp-pd-csi-setup', 'file': 'gcp-pd-csi-setup.yml'}) 
skipping: [node1] => (item={'name': 'gcp-pd-csi-controller', 'file': 'gcp-pd-csi-controller.yml'}) 
skipping: [node1] => (item={'name': 'gcp-pd-csi-node', 'file': 'gcp-pd-csi-node.yml'}) 

TASK [kubernetes-apps/csi_driver/gcp_pd : GCP PD CSI Driver | Apply Manifests] ***
skipping: [node1] => (item=gcp-pd-csi-cred-secret.yml) 
skipping: [node1] => (item=gcp-pd-csi-setup.yml) 
skipping: [node1] => (item=gcp-pd-csi-controller.yml) 
skipping: [node1] => (item=gcp-pd-csi-node.yml) 

TASK [kubernetes-apps/csi_driver/vsphere : include_tasks] **********************
skipping: [node1]

TASK [kubernetes-apps/csi_driver/vsphere : vSphere CSI Driver | Generate CSI cloud-config] ***
skipping: [node1] => (item=vsphere-csi-cloud-config) 

TASK [kubernetes-apps/csi_driver/vsphere : vSphere CSI Driver | Generate Manifests] ***
skipping: [node1] => (item=vsphere-csi-controller-rbac.yml) 
skipping: [node1] => (item=vsphere-csi-controller-ss.yml) 
skipping: [node1] => (item=vsphere-csi-node.yml) 

TASK [kubernetes-apps/csi_driver/vsphere : vSphere CSI Driver | Generate a CSI secret manifest] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/vsphere : vSphere CSI Driver | Apply a CSI secret manifest] ***
skipping: [node1]

TASK [kubernetes-apps/csi_driver/vsphere : vSphere CSI Driver | Apply Manifests] ***
skipping: [node1] => (item=vsphere-csi-controller-rbac.yml) 
skipping: [node1] => (item=vsphere-csi-controller-ss.yml) 
skipping: [node1] => (item=vsphere-csi-node.yml) 

TASK [kubernetes-apps/persistent_volumes/openstack : Kubernetes Persistent Volumes | Lay down OpenStack Cinder Storage Class template] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/openstack : Kubernetes Persistent Volumes | Add OpenStack Cinder Storage Class] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/cinder-csi : Kubernetes Persistent Volumes | Copy Cinder CSI Storage Class template] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/cinder-csi : Kubernetes Persistent Volumes | Add Cinder CSI Storage Class] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/aws-ebs-csi : Kubernetes Persistent Volumes | Copy AWS EBS CSI Storage Class template] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/aws-ebs-csi : Kubernetes Persistent Volumes | Add AWS EBS CSI Storage Class] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/azuredisk-csi : Kubernetes Persistent Volumes | Copy Azure CSI Storage Class template] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/azuredisk-csi : Kubernetes Persistent Volumes | Add Azure CSI Storage Class] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/gcp-pd-csi : Kubernetes Persistent Volumes | Copy GCP PD CSI Storage Class template] ***
skipping: [node1]

TASK [kubernetes-apps/persistent_volumes/gcp-pd-csi : Kubernetes Persistent Volumes | Add GCP PD CSI Storage Class] ***
skipping: [node1]

TASK [kubernetes-apps/snapshots/snapshot-controller : Snapshot Controller | Generate Manifests] ***
skipping: [node1] => (item={'name': 'rbac-snapshot-controller', 'file': 'rbac-snapshot-controller.yml'}) 
skipping: [node1] => (item={'name': 'snapshot-controller', 'file': 'snapshot-controller.yml'}) 

TASK [kubernetes-apps/snapshots/snapshot-controller : Snapshot Controller | Apply Manifests] ***
skipping: [node1] => (item=rbac-snapshot-controller.yml) 
skipping: [node1] => (item=snapshot-controller.yml) 

TASK [kubernetes-apps/snapshots/cinder-csi : Kubernetes Snapshots | Copy Cinder CSI Snapshot Class template] ***
skipping: [node1]

TASK [kubernetes-apps/snapshots/cinder-csi : Kubernetes Snapshots | Add Cinder CSI Snapshot Class] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/kata_containers : Kata Containers | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/kata_containers : Kata Containers | Templates list] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/kata_containers : Kata Containers | Create manifests] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/kata_containers : Kata Containers | Apply manifests] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/crun : crun | Copy runtime class manifest] ***
skipping: [node1]

TASK [kubernetes-apps/container_runtimes/crun : crun | Apply manifests] ********
skipping: [node1]

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU| gather os specific variables] ***

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU | Set fact of download url Tesla] ***
skipping: [node1]

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU | Set fact of download url GTX] ***
skipping: [node1]

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU | Create addon dir] ***
skipping: [node1]

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU | Create manifests for nvidia accelerators] ***
skipping: [node1] => (item={'name': 'nvidia-driver-install-daemonset', 'file': 'nvidia-driver-install-daemonset.yml', 'type': 'daemonset'}) 
skipping: [node1] => (item={'name': 'k8s-device-plugin-nvidia-daemonset', 'file': 'k8s-device-plugin-nvidia-daemonset.yml', 'type': 'daemonset'}) 

TASK [kubernetes-apps/container_engine_accelerator/nvidia_gpu : Container Engine Acceleration Nvidia GPU | Apply manifests for nvidia accelerators] ***
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'nvidia-driver-install-daemonset', 'file': 'nvidia-driver-install-daemonset.yml', 'type': 'daemonset'}, 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': {'name': 'k8s-device-plugin-nvidia-daemonset', 'file': 'k8s-device-plugin-nvidia-daemonset.yml', 'type': 'daemonset'}, 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_private_key] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_region_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_tenancy_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_user_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_user_fingerprint] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_compartment_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_vnc_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_subnet1_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_subnet2_id] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Credentials Check | oci_security_list_management] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Generate Cloud Provider Configuration] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Slurp Configuration] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Encode Configuration] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Generate Manifests] ***
skipping: [node1]

TASK [kubernetes-apps/cloud_controller/oci : OCI Cloud Controller | Apply Manifests] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Check cluster settings for MetalLB] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Check cluster settings for MetalLB] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Check BGP peers for MetalLB] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Check AppArmor status] *******
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Set apparmor_enabled] ********
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Lay Down MetalLB] ************
skipping: [node1] => (item=metallb.yml) 
skipping: [node1] => (item=metallb-config.yml) 

TASK [kubernetes-apps/metallb : Kubernetes Apps | Install and configure MetalLB] ***
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': 'metallb.yml', 'ansible_loop_var': 'item'}) 
skipping: [node1] => (item={'changed': False, 'skipped': True, 'skip_reason': 'Conditional result was False', 'item': 'metallb-config.yml', 'ansible_loop_var': 'item'}) 

TASK [kubernetes-apps/metallb : Kubernetes Apps | Check existing secret of MetalLB] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Create random bytes for MetalLB] ***
skipping: [node1]

TASK [kubernetes-apps/metallb : Kubernetes Apps | Install secret of MetalLB if not existing] ***
skipping: [node1]

PLAY [k8s-cluster] *************************************************************

TASK [download : prep_download | Set a few facts] ******************************
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio] ***
skipping: [node1]

TASK [download : prep_download | Set image info command for containerd and crio on localhost] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if passwordless root is possible] ***
skipping: [node1]

TASK [download : prep_download | On localhost, check if user has access to docker without using sudo] ***
skipping: [node1]

TASK [download : prep_download | Parse the outputs of the previous commands] ***
skipping: [node1]

TASK [download : prep_download | Check that local user is in group or can become root] ***
skipping: [node1]

TASK [download : prep_download | Register docker images info] ******************
skipping: [node1]

TASK [download : prep_download | Create staging directory on remote node] ******
skipping: [node1]

TASK [download : prep_download | Create local cache for files and images on control node] ***
skipping: [node1]

TASK [container-engine/crictl : install crictĺ] ********************************
skipping: [node1]

TASK [download : download | Get kubeadm binary and list of required images] ****
skipping: [node1]

TASK [download : download | Download files / images] ***************************
skipping: [node1] => (item={'key': 'netcheck_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-server', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'netcheck_agent', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/l23network/k8s-netchecker-agent', 'tag': 'v1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'etcd', 'value': {'container': True, 'file': False, 'enabled': True, 'version': 'v3.4.13', 'dest': '/tmp/releases/etcd-v3.4.13-linux-amd64.tar.gz', 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/etcd', 'tag': 'v3.4.13', 'sha256': '', 'url': 'http://192.168.80.48/etcd-v3.4.13-linux-amd64.tar.gz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['etcd']}}) 
skipping: [node1] => (item={'key': 'cni', 'value': {'enabled': True, 'file': True, 'version': 'v0.9.0', 'dest': '/tmp/releases/cni-plugins-linux-amd64-v0.9.0.tgz', 'sha256': '58a58d389895ba9f9bbd3ef330f186c0bb7484136d0bfb9b50152eed55d9ec24', 'url': 'http://192.168.80.48/cni-plugins-linux-amd64-v0.9.0.tgz', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubeadm', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubeadm-v1.19.7-amd64', 'sha256': 'c63ef1842533cd7888c7452cab9f320dcf45fc1c173e9d40abb712d45992db24', 'url': 'http://192.168.80.48/kubeadm', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubelet', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubelet-v1.19.7-amd64', 'sha256': 'd8b296825f6dd7a17287b73cd6604d32210abbba86c88fb68c1b1c5016906c54', 'url': 'http://192.168.80.48/kubelet', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kubectl', 'value': {'enabled': True, 'file': True, 'version': 'v1.19.7', 'dest': '/tmp/releases/kubectl-v1.19.7-amd64', 'sha256': 'd46eb3bbe2575e5b6bedbc6d3519424b4f2f57929d7da1ef7e11c09068f37297', 'url': 'http://192.168.80.48/kubectl', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'crictl', 'value': {'file': True, 'enabled': False, 'version': 'v1.19.0', 'dest': '/tmp/releases/crictl-v1.19.0-linux-amd64.tar.gz', 'sha256': '87d8ef70b61f2fe3d8b4a48f6f712fd798c6e293ed3723c1e4bbb5052098f0ae', 'url': 'http://192.168.80.48/crictl-v1.20.0-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_init', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/cilium-init', 'tag': '2019-04-05', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'cilium_operator', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cilium/operator', 'tag': 'v1.8.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'multus', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/nfvpe/multus', 'tag': 'v3.6', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'flannel', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coreos/flannel', 'tag': 'v0.13.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calicoctl', 'value': {'enabled': True, 'file': True, 'version': 'v3.16.5', 'dest': '/tmp/releases/calicoctl', 'sha256': 'd4175559ad0cf69a1352be3d824ae0a794305d6cd5b17ea0ffc6a153b21d2ae7', 'url': 'http://192.168.80.48/calicoctl-linux-amd64', 'unarchive': False, 'owner': 'root', 'mode': '0755', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_node', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/node', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_cni', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/cni', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_policy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/kube-controllers', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'calico_typha', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/calico/typha', 'tag': 'v3.16.5', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_kube', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-kube', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'weave_npc', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/weaveworks/weave-npc', 'tag': '2.7.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'ovn4nfv', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/integratedcloudnative/ovn4nfv-k8s-plugin', 'tag': 'v1.1.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_ovn', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubeovn/kube-ovn', 'tag': 'v1.5.2', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'kube_router', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cloudnativelabs/kube-router', 'tag': 'v1.1.1', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'pod_infra', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/pause', 'tag': '3.3', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'install_socat', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/xueshanf/install-socat', 'tag': 'latest', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'nginx', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/nginx', 'tag': 1.19, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'haproxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/haproxy', 'tag': 2.2, 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'coredns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/coredns', 'tag': '1.7.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'nodelocaldns', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/dns/k8s-dns-node-cache', 'tag': '1.16.0', 'sha256': '', 'groups': ['k8s-cluster']}}) 
skipping: [node1] => (item={'key': 'dnsautoscaler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/cpa/cluster-proportional-autoscaler-amd64', 'tag': '1.8.3', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'testbox', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/busybox', 'tag': 'latest', 'sha256': ''}}) 
skipping: [node1] => (item={'key': 'helm', 'value': {'enabled': False, 'file': True, 'version': 'v3.3.4', 'dest': '/tmp/releases/helm-v3.3.4/helm-v3.3.4-linux-amd64.tar.gz', 'sha256': 'b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c', 'url': 'https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz', 'unarchive': True, 'owner': 'root', 'mode': '0755', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'registry', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/library/registry', 'tag': '2.7.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'registry_proxy', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-registry-proxy', 'tag': '0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'metrics_server', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/metrics-server/metrics-server', 'tag': 'v0.3.7', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'addon_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/addon-resizer', 'tag': '1.8.11', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'local_volume_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/local-volume-provisioner', 'tag': 'v2.3.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cephfs_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/cephfs-provisioner', 'tag': 'v2.1.0-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'rbd_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/external_storage/rbd-provisioner', 'tag': 'v2.1.1-k8s1.11', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'local_path_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/rancher/local-path-provisioner', 'tag': 'v0.0.17', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_nginx_controller', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/ingress-nginx/controller', 'tag': 'v0.41.2', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_ambassador_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/datawire/ambassador-operator', 'tag': 'v1.2.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'ingress_alb_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-alb-ingress-controller', 'tag': 'v1.1.9', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-controller', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_cainjector', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-cainjector', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cert_manager_webhook', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/jetstack/cert-manager-webhook', 'tag': 'v1.0.4', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_attacher', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-attacher', 'tag': 'v2.2.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_provisioner', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-provisioner', 'tag': 'v1.6.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_snapshotter', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-snapshotter', 'tag': 'v2.1.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'snapshot_controller', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/snapshot-controller', 'tag': 'v2.0.1', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_resizer', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-resizer', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'csi_node_driver_registrar', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scsi/csi-node-driver-registrar', 'tag': 'v1.3.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'cinder_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/k8scloudprovider/cinder-csi-plugin', 'tag': 'v1.18.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'aws_ebs_csi_plugin', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/amazon/aws-ebs-csi-driver', 'tag': 'v0.5.0', 'sha256': '', 'groups': ['kube-node']}}) 
skipping: [node1] => (item={'key': 'dashboard', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/dashboard-amd64', 'tag': 'v2.1.0', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'dashboard_metrics_scrapper', 'value': {'enabled': False, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kubernetesui/metrics-scraper', 'tag': 'v1.0.6', 'sha256': '', 'groups': ['kube-master']}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-apiserver', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-apiserver', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-controller-manager', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-controller-manager', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-scheduler', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-scheduler', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 
skipping: [node1] => (item={'key': 'kubeadm_kube-proxy', 'value': {'enabled': True, 'container': True, 'repo': 'harbor.dev.rdev.tech/kubesprary/kube-proxy', 'tag': 'v1.19.7', 'groups': 'k8s-cluster'}}) 

TASK [kubespray-defaults : Configure defaults] *********************************
ok: [node1] => {
    "msg": "Check roles/kubespray-defaults/defaults/main.yml"
}

TASK [kubespray-defaults : Set up proxy environment] ***************************
ok: [node1]

TASK [kubespray-defaults : Gather ansible_default_ipv4 from all hosts] *********
skipping: [node1] => (item=node1) 
skipping: [node1] => (item=node1) 

TASK [kubespray-defaults : create fallback_ips_base] ***************************
skipping: [node1]

TASK [kubespray-defaults : set fallback_ips] ***********************************
skipping: [node1]

TASK [kubespray-defaults : Set no_proxy to all assigned cluster IPs and hostnames] ***
skipping: [node1]

TASK [kubespray-defaults : Populates no_proxy to all hosts] ********************
skipping: [node1]

TASK [adduser : User | Create User Group] **************************************
skipping: [node1]

TASK [adduser : User | Create User] ********************************************
skipping: [node1]

TASK [kubernetes/preinstall : Remove swapfile from /etc/fstab] *****************
skipping: [node1] => (item=swap) 
skipping: [node1] => (item=none) 

TASK [kubernetes/preinstall : check swap] **************************************
skipping: [node1]

TASK [kubernetes/preinstall : Disable swap] ************************************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if either kube-master or kube-node group is empty] ***
skipping: [node1] => (item=kube-master) 
skipping: [node1] => (item=kube-node) 

TASK [kubernetes/preinstall : Stop if etcd group is empty in external etcd mode] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if non systemd OS type] *********************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown OS] ******************************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown network plugin] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if incompatible network plugin and cloudprovider] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unsupported version of Kubernetes] *******
skipping: [node1]

TASK [kubernetes/preinstall : Stop if known booleans are set as strings (Use JSON format on CLI: -e "{'key': true }")] ***
skipping: [node1] => (item={'name': 'download_run_once', 'value': False}) 
skipping: [node1] => (item={'name': 'deploy_netchecker', 'value': False}) 
skipping: [node1] => (item={'name': 'download_always_pull', 'value': False}) 
skipping: [node1] => (item={'name': 'helm_enabled', 'value': False}) 
skipping: [node1] => (item={'name': 'openstack_lbaas_enabled', 'value': False}) 

TASK [kubernetes/preinstall : Stop if even number of etcd hosts] ***************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if memory is too small for masters] *********
skipping: [node1]

TASK [kubernetes/preinstall : Stop if memory is too small for nodes] ***********
skipping: [node1]

TASK [kubernetes/preinstall : Guarantee that enough network address space is available for all pods] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if ip var does not match local ips] *********
skipping: [node1]

TASK [kubernetes/preinstall : Stop if access_ip is not pingable] ***************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if RBAC is not enabled when dashboard is enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if RBAC is not enabled when OCI cloud controller is enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if RBAC and anonymous-auth are not enabled when insecure port is disabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if kernel version is too low] ***************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if bad hostname] ****************************
skipping: [node1]

TASK [kubernetes/preinstall : check cloud_provider value] **********************
skipping: [node1]

TASK [kubernetes/preinstall : Ensure minimum calico version] *******************
skipping: [node1]

TASK [kubernetes/preinstall : Get current calico cluster version] **************
skipping: [node1]

TASK [kubernetes/preinstall : Check that current calico version is enough for upgrade] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that cluster_id is set if calico_rr enabled] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that calico_rr nodes are in k8s-cluster group] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that kube_service_addresses is a network range] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that kube_pods_subnet is a network range] ***
skipping: [node1]

TASK [kubernetes/preinstall : Check that kube_pods_subnet does not collide with kube_service_addresses] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown dns mode] ************************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown kube proxy mode] *****************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if vault is chose] **************************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown cert_management] *****************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if unknown resolvconf_mode] *****************
skipping: [node1]

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host or docker] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if etcd deployment type is not host when container_manager != docker] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if download_localhost is enabled but download_run_once is not] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if kata_containers_enabled is enabled when container_manager is docker] ***
skipping: [node1]

TASK [kubernetes/preinstall : Stop if download_localhost is enabled for Flatcar Container Linux] ***
skipping: [node1]

TASK [kubernetes/preinstall : Force binaries directory for Flatcar Container Linux by Kinvolk] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if booted with ostree] *********************
skipping: [node1]

TASK [kubernetes/preinstall : set is_fedora_coreos] ****************************
skipping: [node1]

TASK [kubernetes/preinstall : set is_fedora_coreos] ****************************
skipping: [node1]

TASK [kubernetes/preinstall : check resolvconf] ********************************
skipping: [node1]

TASK [kubernetes/preinstall : check systemd-resolved] **************************
skipping: [node1]

TASK [kubernetes/preinstall : set dns facts] ***********************************
skipping: [node1]

TASK [kubernetes/preinstall : check if kubelet is configured] ******************
skipping: [node1]

TASK [kubernetes/preinstall : check if early DNS configuration stage] **********
skipping: [node1]

TASK [kubernetes/preinstall : target resolv.conf files] ************************
skipping: [node1]

TASK [kubernetes/preinstall : target temporary resolvconf cloud init file (Flatcar Container Linux by Kinvolk / Fedora CoreOS)] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if /etc/dhclient.conf exists] **************
skipping: [node1]

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhclient.conf] ***
skipping: [node1]

TASK [kubernetes/preinstall : check if /etc/dhcp/dhclient.conf exists] *********
skipping: [node1]

TASK [kubernetes/preinstall : target dhclient conf file for /etc/dhcp/dhclient.conf] ***
skipping: [node1]

TASK [kubernetes/preinstall : target dhclient hook file for Red Hat family] ****
skipping: [node1]

TASK [kubernetes/preinstall : target dhclient hook file for Debian family] *****
skipping: [node1]

TASK [kubernetes/preinstall : generate search domains to resolvconf] ***********
skipping: [node1]

TASK [kubernetes/preinstall : pick coredns cluster IP or default resolver] *****
skipping: [node1]

TASK [kubernetes/preinstall : generate nameservers to resolvconf] **************
skipping: [node1]

TASK [kubernetes/preinstall : gather os specific variables] ********************
skipping: [node1] => (item=/mnt/d/Workspace/KAnsible/data/kubespray/kubespray/roles/kubernetes/preinstall/vars/../vars/ubuntu.yml) 

TASK [kubernetes/preinstall : set etcd vars if using kubeadm mode] *************
skipping: [node1]

TASK [kubernetes/preinstall : check /usr readonly] *****************************
skipping: [node1]

TASK [kubernetes/preinstall : set alternate flexvolume path] *******************
skipping: [node1]

TASK [kubernetes/preinstall : Create kubernetes directories] *******************
skipping: [node1] => (item=/etc/kubernetes) 
skipping: [node1] => (item=/etc/kubernetes/ssl) 
skipping: [node1] => (item=/etc/kubernetes/manifests) 
skipping: [node1] => (item=/usr/local/bin/kubernetes-scripts) 
skipping: [node1] => (item=/usr/libexec/kubernetes/kubelet-plugins/volume/exec) 

TASK [kubernetes/preinstall : Create other directories] ************************
skipping: [node1] => (item=/usr/local/bin) 

TASK [kubernetes/preinstall : Check if kubernetes kubeadm compat cert dir exists] ***
skipping: [node1]

TASK [kubernetes/preinstall : Create kubernetes kubeadm compat cert dir (kubernetes/kubeadm issue 1498)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Create cni directories] **************************
skipping: [node1] => (item=/etc/cni/net.d) 
skipping: [node1] => (item=/opt/cni/bin) 
skipping: [node1] => (item=/var/lib/calico) 

TASK [kubernetes/preinstall : Create local volume provisioner directories] *****
skipping: [node1] => (item=local-storage) 

TASK [kubernetes/preinstall : create temporary resolveconf cloud init file] ****
skipping: [node1]

TASK [kubernetes/preinstall : Add domain/search/nameservers/options to resolv.conf] ***
skipping: [node1]

TASK [kubernetes/preinstall : Remove search/domain/nameserver options before block] ***
skipping: [node1] => (item=['/etc/resolv.conf', 'search ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'nameserver ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'domain ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'options ']) 

TASK [kubernetes/preinstall : Remove search/domain/nameserver options after block] ***
skipping: [node1] => (item=['/etc/resolv.conf', 'search ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'nameserver ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'domain ']) 
skipping: [node1] => (item=['/etc/resolv.conf', 'options ']) 

TASK [kubernetes/preinstall : get temporary resolveconf cloud init file content] ***
skipping: [node1]

TASK [kubernetes/preinstall : persist resolvconf cloud init file] **************
skipping: [node1]

TASK [kubernetes/preinstall : Write resolved.conf] *****************************
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add nameservers to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add DNS search to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : NetworkManager | Add DNS options to NM configuration] ***
skipping: [node1]

TASK [kubernetes/preinstall : Update package management cache (zypper) - SUSE] ***
skipping: [node1]

TASK [kubernetes/preinstall : Update package management cache (APT)] ***********
skipping: [node1]

TASK [kubernetes/preinstall : Remove legacy docker repo file] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Install python3-dnf for latest RedHat versions] ***
skipping: [node1]

TASK [kubernetes/preinstall : Install epel-release on RedHat/CentOS] ***********
skipping: [node1]

TASK [kubernetes/preinstall : Update common_required_pkgs with ipvsadm when kube_proxy_mode is ipvs] ***
skipping: [node1]

TASK [kubernetes/preinstall : Install packages requirements] *******************
skipping: [node1]

TASK [kubernetes/preinstall : Install ipvsadm for ClearLinux] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Confirm selinux deployed] ************************
skipping: [node1]

TASK [kubernetes/preinstall : Set selinux policy] ******************************
skipping: [node1]

TASK [kubernetes/preinstall : Disable IPv6 DNS lookup] *************************
skipping: [node1]

TASK [kubernetes/preinstall : Stat sysctl file configuration] ******************
skipping: [node1]

TASK [kubernetes/preinstall : Change sysctl file path to link source if linked] ***
skipping: [node1]

TASK [kubernetes/preinstall : Make sure sysctl file path folder exists] ********
skipping: [node1]

TASK [kubernetes/preinstall : Enable ip forwarding] ****************************
skipping: [node1]

TASK [kubernetes/preinstall : Ensure kube-bench parameters are set] ************
skipping: [node1] => (item={'name': 'vm.overcommit_memory', 'value': 1}) 
skipping: [node1] => (item={'name': 'kernel.panic', 'value': 10}) 
skipping: [node1] => (item={'name': 'kernel.panic_on_oops', 'value': 1}) 

TASK [kubernetes/preinstall : Hosts | create list from inventory] **************
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | populate inventory into hosts file] ******
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | populate kubernetes loadbalancer address into hosts file] ***
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | Retrieve hosts file content] *************
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | Extract existing entries for localhost from hosts file] ***
skipping: [node1]

TASK [kubernetes/preinstall : Hosts | Update target hosts file entries dict with required entries] ***
skipping: [node1] => (item={'key': '127.0.0.1', 'value': {'expected': ['localhost', 'localhost.localdomain']}}) 
skipping: [node1] => (item={'key': '::1', 'value': {'expected': ['localhost6', 'localhost6.localdomain'], 'unexpected': ['localhost', 'localhost.localdomain']}}) 

TASK [kubernetes/preinstall : Hosts | Update (if necessary) hosts file] ********
skipping: [node1] => (item={'key': '127.0.0.1', 'value': ['localhost', 'localhost.localdomain']}) 
skipping: [node1] => (item={'key': '::1', 'value': ['ip6-localhost', 'ip6-loopback', 'localhost6', 'localhost6.localdomain']}) 

TASK [kubernetes/preinstall : Update facts] ************************************
skipping: [node1]

TASK [kubernetes/preinstall : Configure dhclient to supersede search/domain/nameservers] ***
skipping: [node1]

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (non-RH)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Configure dhclient hooks for resolv.conf (RH-only)] ***
skipping: [node1]

TASK [kubernetes/preinstall : Remove kubespray specific config from dhclient config] ***
skipping: [node1]

TASK [kubernetes/preinstall : Remove kubespray specific dhclient hook] *********
skipping: [node1]

TASK [kubernetes/preinstall : Check if we are running inside a Azure VM] *******
skipping: [node1]

TASK [kubernetes/preinstall : install growpart] ********************************
skipping: [node1]

TASK [kubernetes/preinstall : check if growpart needs to be run] ***************
skipping: [node1]

TASK [kubernetes/preinstall : check fs type] ***********************************
skipping: [node1]

TASK [kubernetes/preinstall : run growpart] ************************************
skipping: [node1]

TASK [kubernetes/preinstall : run xfs_growfs] **********************************
skipping: [node1]

PLAY RECAP *********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
node1                      : ok=543  changed=21   unreachable=0    failed=0    skipped=1099 rescued=0    ignored=1   

Command execution success